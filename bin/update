#!/usr/bin/env bash

set -e

# Update dotfiles and provide instructions for updating the system
#

# initialize script and dependencies -------------------------------------------
# get this bootstrap folder
cd "$(dirname "$0")/.."
dotfiles_path="$(pwd)"
logs_path="$dotfiles_path/logs"
bootstrap_path="$dotfiles_path/bootstrap"
source "$bootstrap_path/helpers.sh"

# Usage ------------------------------------------------------------------------
if [[ $# -eq 0 ]]; then
  dkousage "update [thing]"
  dkousage_ "thing is one of:"
  dkousage_ "  dotfiles"
  dkousage_ "  fzf"
  dkousage_ "  gem"
  dkousage_ "  go"
  dkousage_ "  heroku"
  dkousage_ "  npm"
  dkousage_ "  nvm"
  dkousage_ "  php    # phpenv"
  dkousage_ "  pip"
  dkousage_ "  vim"
  dkousage_ "  arch   # arch only"
  dkousage_ "  osx    # osx only"
  dkousage_ "  brew   # osx only"
  dkousage_ "  wp-cli # linux only"
  exit 1
fi

# Command functions ------------------------------------------------------------
_update_fzf() {
  cd "$HOME/.fzf" && git pull --stat && ./install
}

_update_pip() {
  local pip_command=${1:-pip}
  dkostatus "Updating $pip_command"
  if has_program "$pip_command"; then
    $pip_command install --upgrade setuptools | dkoindent
    $pip_command install --upgrade pip | dkoindent
  fi
}

_update_linux() {
  case "$1" in
    arch)
      dkostatus "ArchLinux system update"
      if command -v pacaur >/dev/null; then
        # update system
        pacaur -Syu
      elif command -v yaourt >/dev/null; then
        # -Sy         -- get new file list
        yaourt --sync --refresh
        yaourt -Syua
      elif command -v aura >/dev/null; then
        aura -Syua
      else
        pacman -Syu
      fi
      ;;

    wp)
      dkostatus "Update wp-cli"
      pushd "$HOME/.wp-cli" &&
      php composer.phar self-update | dkoindent &&
      php composer.phar update --no-dev | dkoindent &&
      popd
      ;;
  esac
}

_update_darwin() {
  case "$1" in
    brew)
      dkostatus "Updating homebrew"
      brew update
      dkostatus "List of outdated packages"
      brew outdated | dkoindent
      dkostatus "Upgrade packages"
      brew upgrade --all 2>&1 | tee "$logs_path/brew-upgrade.log"
      dkostatus "Cleanup old versions and prune dead symlinks"
      brew cleanup | dkoindent
      brew prune | dkoindent
      ;;

    osx)
      dkostatus "Repairing permissions"
      # fix file system permissions
      diskutil repairPermissions / | dkoindent

      dkostatus "OSX system update"
      sudo softwareupdate -i -a | dkoindent
      ;;

    pip)
      _update_pip "pip"
      _update_pip "pip2"
      _update_pip "pip3"
      ;;
  esac
}

# Common -----------------------------------------------------------------------
if [[ "$1" = "dotfiles" ]]; then
  dkostatus "Updating dotfiles"
  # Make sure there are no untracked changes before updating dotfiles

  # Update dotfiles
  dkostatus_ "Getting latest updates"
  cd "$HOME/.dotfiles" && \
    git pull --stat --rebase --recurse-submodules | dkoindent && \
    git submodule update --init | dkoindent
  updated_dotfiles=$?
  if [[ $updated_dotfiles -ne 0 ]]; then
    dkodie "You have unsaved changes in your ~/.dotfiles folder."
    exit 1
  fi
fi

if [[ "$1" = "fzf" ]]; then
  dkostatus "Updating fzf"
  _update_fzf
fi

if [[ "$1" = "gem" ]]; then
  dkostatus "Updating RubyGems itself"
  gem update --system | dkoindent
  dkostatus "Updating gems"
  gem update | dkoindent
fi

if [[ "$1" = "go" ]]; then
  if has_program "go"; then
    dkostatus "Updating go packages"
    go get -u all | dkoindent
  fi
fi

if [[ "$1" = "heroku" ]]; then
  heroku update | dkoindent
fi

if [[ "$1" = "npm" ]]; then
  dkostatus "Updating global npm modules"
  npm update -g
fi

if [[ "$1" = "nvm" ]]; then
  nvm_node_version="v0.12"

  if [ ! -d ~/.nvm ]; then
    dkostatus "Installing nvm"
    git clone https://github.com/creationix/nvm.git ~/.nvm
  fi

  dkostatus "Updating nvm"
  cd ~/.nvm
  git checkout master
  git fetch --tags
  git checkout "$(git describe --abbrev=0 --tags)"

  NVM_DIR="$HOME/.nvm"
  source "$NVM_DIR/nvm.sh"

  dkostatus "Installing and using node version ${nvm_node_version}"
  # install stable node and use as default
  nvm install "${nvm_node_version}" --reinstall-packages-from=node
  nvm use "${nvm_node_version}"
  nvm alias default "${nvm_node_version}"
fi

if [ "$1" = "php" ] && [ -d "$HOME/.phpenv" ]; then
  dkostatus "Updating phpenv"
  pushd "$HOME/.phpenv" >/dev/null && git pull --stat | dkoindent && popd >/dev/null
  phpenv rehash | dkoindent
fi

if [[ "$1" = "vim" ]]; then
  dkostatus "Updating vim bundles"
  vim -N -u "$HOME/.vim/vimrc" -c "try |\
    PlugUpgrade 1 |\
    PlugClean! |\
    PlugUpdate |\
    finally | qall! | endtry" -U NONE -i NONE

  # old neobundle version:
  #   NeoBundleClean! |\
  #   NeoBundleCheck |\
  #   NeoBundleUpdate |\
  #   NeoBundleUpdatesLog $* |\
  #   message |\
  #   finally | qall! | endtry" -U NONE -i NONE -V1 -e -s
fi

# Begin OS Specific ------------------------------------------------------------
case "$OSTYPE" in
  linux*)   _update_linux "$1"  ;;
  darwin*)  _update_darwin "$1" ;;
esac

