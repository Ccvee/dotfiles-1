set encoding=utf-8 nobomb
scriptencoding utf-8
" note: set encoding BEFORE scriptencoding

" http://www.reddit.com/r/vim/comments/2z2fg0/need_some_inspiration_for_your_vimrc/cpf8zho
" no nocompatible! so we can source the vimrc again if updated
if &compatible | set nocompatible | endif

let g:dko_vim_dir = fnamemodify(resolve(expand("$MYVIMRC")), ":p:h")

" ============================================================================
" Settings vars
" ============================================================================

" Used by anything that needs to change/use loc list (e.g. syntastic)
let g:dko_loc_list_height = 10

" ============================================================================
" Default colors
" ============================================================================

let g:dko_has_true_color = exists("$ITERM_BETA")
if !g:dko_has_true_color
  if $COLORTERM == 'gnome-terminal' | set t_Co=256 | endif
  " set this early so plugins can override
  colorscheme pablo
endif

" ============================================================================
" Map <Leader> to Space
" ============================================================================

" no longer using comma so I can reverse repeat fFtT searches
" no longer using \ so I can type escaped chars :/
" needs to be before bundle so plugins map correctly
let g:mapleader = "\<Space>"

" ============================================================================
" My autocmd block - Clear vimrc group's autocmds if reloading
" ============================================================================
if has('autocmd')
  augroup vimrc
    autocmd!
  augroup END
endif

" ============================================================================
" Plugins
" ============================================================================

" Only load plugins on vim 7.3+ with autocmd
let g:dko_use_plugins = $DOTFILES_DISTRO != 'busybox' && has('autocmd')

" ============================================================================
" netrw
" ============================================================================
let g:loaded_netrwPlugin = !g:dko_use_plugins
" netrw in details format when no vimfiler
let g:netrw_liststyle = 3
let g:netrw_home = expand(g:dko_vim_dir . '/.tmp/cache')

" ============================================================================
" vim-plug
" ============================================================================

" Add plugin dirs to the runtimepath
if g:dko_use_plugins
  " Load vim-plug
  if empty(glob(expand(g:dko_vim_dir . '/autoload/plug.vim')))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd vimrc VimEnter * PlugInstall | source $MYVIMRC
  endif

  let g:dko_plugdir = '/plug/vim'
  if has('nvim') | let g:dko_plugdir = '/plug/nvim' | endif

  " ==========================================================================
  " What to load
  " ==========================================================================

  let g:dko_use_incsearch       = !has('nvim')
  let g:dko_use_deoplete        = has('nvim') && has('python3')
  let g:dko_use_neocomplete     = !has('nvim') && has('lua')

  " These get modified later
  let g:dko_use_airline         = 1
  let g:dko_use_gutentags       = 0
  let g:dko_use_indenttab       = 1
  let g:dko_use_tern_completion = 1
  let g:dko_has_completion      = 0

  call plug#begin(g:dko_vim_dir . g:dko_plugdir)

  " Notes on adding plugins:
  " - Absolutely do not use 'for' if the plugin provides an `ftdetect/`
  " - Use 'for' if the plugin has an `autoload/` dir, otherwise it provides
  "   no benefit (`ftplugin/`, `syntax/` and `indent/` are already only loaded
  "   based on the filetype matching the script name).

  " ========================================================================
  " Plug: Debugging
  " ========================================================================

  "Plug 'gerw/vim-HiLinkTrace'

  " ========================================================================
  " Plug: File system
  " ========================================================================

  " creates dir if new file in new dir
  Plug 'dockyard/vim-easydir'

  if g:dko_use_gutentags | Plug 'ludovicchabant/vim-gutentags'
  endif

  " ========================================================================
  " Plug: Commands + Colorscheme
  " ========================================================================

  " Mostly for :Gblame
  Plug 'tpope/vim-fugitive'

  " gK to lookup
  Plug 'keith/investigate.vim'

  " <F1> fuzzy find
  " <F2> recently used (neomru)
  " <F3> grep
  " <F8> command palette
  " <F9> file browser (vimfiler)
  " <F10> outline mode browser (unite-outline)
  " Most recently used files for unite.vim -- config is in unite.vim
  Plug 'Shougo/vimproc.vim', { 'do': 'make' }
        \| Plug 'Shougo/neomru.vim'
        \| Plug 'Shougo/unite.vim'
        \| Plug 'Shougo/unite-outline'
        \| Plug 'Shougo/vimfiler.vim'
        \| Plug 'ujihisa/unite-font'

  " <F5> toggle color
  if has('nvim') && g:dko_has_true_color
    Plug 'frankier/neovim-colors-solarized-truecolor-only'
  elseif has('gui_running')
    Plug 'altercation/vim-colors-solarized'
  endif

  " <F6>
  Plug 'nathanaelkane/vim-indent-guides'

  " <F7> - command mode with instant results when doing subst %s
  Plug 'osyo-manga/vim-over', { 'on': ['OverCommandLine'] }

  " Add file manip commands like Remove, Move, Rename, SudoWrite
  Plug 'tpope/vim-eunuch'

  " ========================================================================
  " Plug: Input, syntax, spacing
  " ========================================================================

  " @vimlint(EVL108, 1)
  if has('patch-7.4.785') && !has('fixedendofline')
    Plug 'vim-scripts/PreserveNoEOL'
  endif
  " Requires PreserveNoEOL or +fixedendofline
  Plug 'editorconfig/editorconfig-vim'

  " highlight matching html tag
  Plug 'gregsexton/MatchTag'

  " add gS to smart split lines like comma lists and html tags
  Plug 'AndrewRadev/splitjoin.vim'

  Plug 'scrooloose/syntastic'

  if g:dko_use_indenttab
    Plug 'vim-scripts/ingo-library'
          \| Plug 'vim-scripts/IndentTab'
  endif

  " ========================================================================
  " Plug: Completion
  " ========================================================================

  if      g:dko_use_neocomplete | Plug 'Shougo/neocomplete.vim'
  elseif  g:dko_use_deoplete    | Plug 'Shougo/deoplete.nvim'
  endif

  let g:dko_has_completion =
        \ exists("g:plugs['neocomplete.vim']")
        \ || exists("g:plugs['deoplete.nvim']")

  if g:dko_has_completion
    "Full syntax completion - super slow
    "Plug 'Shougo/neco-syntax', { 'for': ['scss'] }

    Plug 'Shougo/neco-vim', { 'for': ['vim'] }

    if g:dko_use_tern_completion
      Plug 'marijnh/tern_for_vim', { 'do': 'npm install' }
    endif

    Plug 'Shougo/neosnippet'
          \| Plug 'honza/vim-snippets'
          \| Plug 'Shougo/neosnippet-snippets'
  endif

  " ========================================================================
  " Plug: Editing keys
  " ========================================================================

  Plug 'godlygeek/tabular', { 'on': ['Tabularize'] }

  " [x and ]x to jump to conflict markers
  Plug 'rhysd/conflict-marker.vim'

  " ;; or ,, to auto-insert comma or semicolon at end of current line as needed
  Plug 'lfilho/cosco.vim'

  " custom C-x C-a mappings
  Plug 'nishigori/increment-activator'

  Plug 'tomtom/tcomment_vim'

  " easyclip requires repeat
  Plug 'tpope/vim-repeat'
        \| Plug 'svermeulen/vim-easyclip'
        \| Plug 'davidosomething/EasyClipRing.vim'

  " fast increment datetimes
  Plug 'tpope/vim-speeddating'

  Plug 'tpope/vim-surround'

  " used for line bubbling commands on osx
  Plug 'tpope/vim-unimpaired'

  " provide ai and ii for indent blocks
  " provide al and il for current line
  " provide a_ and i_ for underscores
  " provide a- and i-
  " provide a= and i= for conflicts
  Plug 'kana/vim-textobj-user'
        \| Plug 'kana/vim-textobj-indent'
        \| Plug 'kana/vim-textobj-line'
        \| Plug 'mattn/vim-textobj-url'
        \| Plug 'rhysd/vim-textobj-conflict'

  " provide {, ", ', [, <, various other block objects
  Plug 'paradigm/TextObjectify'

  " ========================================================================
  " Plug: Language
  " ========================================================================

  " special end syntax for various langs
  Plug 'tpope/vim-endwise'

  " ========================================================================
  " Language: Git
  " ========================================================================

  " creates gitconfig, gitcommit, rebase
  " vim 7.4-77 ships with 2013 version, this is newer
  Plug 'tpope/vim-git'

  " show multipanes when editing a COMMIT_EDITMSG
  Plug 'rhysd/committia.vim'

  " ========================================================================
  " Language: HTML and generators
  " ========================================================================

  Plug 'othree/html5.vim'

  Plug 'digitaltoad/vim-jade'

  Plug 'tpope/vim-haml'

  " ========================================================================
  " Language: JavaScript / CoffeeScript / JSON
  " ========================================================================

  Plug 'elzr/vim-json'

  Plug 'heavenshell/vim-jsdoc'

  " provides coffee ft
  Plug 'kchmck/vim-coffee-script'

  " gf for going to node_modules files
  Plug 'moll/vim-node'

  " react/JSX syn highlighting for .cjsx
  " If you're using coffee+react instead of es6+react, quit your job.
  "Plug 'mtscout6/vim-cjsx'

  " indenting/highlighting, replaces 'jelera/vim-javascript-syntax'
  " mxw/vim-jsx - react/JSX syn highlighting for .jsx and requires yajs first
  "Plug 'pangloss/vim-javascript'
  "Plug 'jelera/vim-javascript-syntax'
  Plug 'othree/yajs.vim'
        \| Plug 'gavocanov/vim-js-indent'
        \| Plug 'mxw/vim-jsx'
  Plug 'othree/jspc.vim'

  " extends syntax for with jQuery,backbone,etc.
  Plug 'othree/javascript-libraries-syntax.vim'

  " Temp broken
  "Plug 'othree/jsdoc-syntax.vim'

  " ========================================================================
  " Language: Markdown
  " ========================================================================

  " Override vim included markdown ft* and syntax
  " The git repo has a newer syntax file than the one that ships with vim
  Plug 'tpope/vim-markdown'

  " ========================================================================
  " Language: Mustache.js and Handlebars
  " ========================================================================

  " Creates html.handlebars and other fts and sets syn
  Plug 'mustache/vim-mustache-handlebars'

  " ========================================================================
  " Language: Nginx
  " ========================================================================

  Plug 'moskytw/nginx-contrib-vim'

  " ========================================================================
  " Language: PHP, twig
  " ========================================================================

  " official indent plugin for vim, later version than what it comes with
  Plug '2072/PHP-Indenting-for-VIm'

  " creates twig ft
  Plug 'evidens/vim-twig'

  Plug 'tobyS/vmustache', { 'for': ['php', 'blade'] }
        \| Plug 'tobyS/pdv', { 'for': ['php', 'blade'] }

  Plug 'shawncplus/phpcomplete.vim'
        "\| Plug 'dsawardekar/wordpress.vim', { 'for': ['php'] }

  Plug 'StanAngeloff/php.vim'

  " ========================================================================
  " Language: Ruby, rails, puppet
  " ========================================================================

  " creates pp filetype
  Plug 'rodjek/vim-puppet'

  " highlighting for Gemfile
  Plug 'tpope/vim-bundler'

  " creates ruby filetype
  Plug 'vim-ruby/vim-ruby'

  " ========================================================================
  " Language: Stylesheets
  " ========================================================================

  Plug 'ap/vim-css-color'

  " creates less filetype
  Plug 'groenewege/vim-less'

  " css.vim provides @media syntax highlighting where hail2u doesn't
  " JulesWang/css.vim is the active repo for the css.vim bundled with vim
  " hail2u extends vim's css highlighting
  Plug 'JulesWang/css.vim'
        \| Plug 'hail2u/vim-css3-syntax'
        \| Plug 'cakebaker/scss-syntax.vim'

  " ========================================================================
  " Language: VimL
  " ========================================================================

  Plug 'ynkdir/vim-vimlparser'
        \| Plug 'syngan/vim-vimlint'

  if executable('vint')
    Plug 'Kuniwak/vint'
          \| Plug 'todesking/vint-syntastic'
  endif

  " ========================================================================
  " Language: YAML
  " ========================================================================

  Plug 'ingydotnet/yaml-vim'

  " ========================================================================
  " Plug: UI -- load last!
  " ========================================================================

  " highlight partial matches as you type in search mode
  if g:dko_use_incsearch | Plug 'haya14busa/incsearch.vim'
  endif

  " show registers in split if use \" or <C-R>
  Plug 'junegunn/vim-peekaboo'

  " Show (#/total results) when searching for a term
  Plug 'osyo-manga/vim-anzu'

  if g:dko_use_airline | Plug 'bling/vim-airline'
  endif

  Plug 'now/vim-quit-if-only-quickfix-buffer-left'

  call plug#end()

  " ========================================================================
  " Configs
  " ========================================================================

  " Some configs need to be set before plugins are loaded, see before/plugin/*
  " Rest are split into ftplugin/*.vim and plugin/plug-*.vim as needed

endif

" ============================================================================
" Fix runtimepath
" ============================================================================

" VIM is very unusual that it loads system preferences AFTER user preferences
" so users have a very hard time overriding system prefs (unless they use
" after/ exclusively and the system after/ is empty).
"
" E.g. the archlinux distribution includes the line `set history=50` in
" /usr/share/vim/vimfiles/archlinux.vim which loaded by /etc/vimrc. That file
" is always loaded after the user vimrc which makes it annoying to override.

" Remove system runtimepaths
execute "set runtimepath-=$VIM/vimfiles"
execute "set runtimepath-=$VIMRUNTIME"
execute "set runtimepath-=$VIM/vimfiles/after"

" Remove default user runtimepaths
execute "set runtimepath-=$HOME/.vim"
execute "set runtimepath-=$HOME/.vim/after"
execute "set runtimepath-=$XDG_CONFIG_HOME/nvim"
execute "set runtimepath-=$XDG_CONFIG_HOME/nvim/after"

" Save vim-plug runtimepaths
let g:dko_plugins_rtp=&runtimepath

" Start runtimepath with system runtimepath
execute "set runtimepath=$VIM/vimfiles,$VIMRUNTIME"

" Append my runtimepaths (not the same as default user, these use specific
" dko_vim_dir path)
execute "set runtimepath+=" . g:dko_vim_dir
execute "set runtimepath+=" . g:dko_vim_dir . "/before"

" Append vim-plug runtimepaths
execute "set runtimepath+=" . g:dko_plugins_rtp

" Append after: system, then mine, so mine is the last
execute "set runtimepath+=$VIM/vimfiles/after"
execute "set runtimepath+=" . g:dko_vim_dir . "/after"
execute "set runtimepath+=$HOME/.secret/vim/"

" ============================================================================
" SEE before/plugin/mine.vim for my options
" ============================================================================

" ============================================================================
" local
" ============================================================================

runtime! vimrc.vim

