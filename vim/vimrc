" determine env
if has("unix")
  let s:uname = system("uname")
endif

""
" plugin management
filetype off
if v:version >= 704
  let iCanHazBundle=1
  let bundle_readme=expand('~/.vim/bundle/neobundle.vim/README.md')
  if !filereadable(bundle_readme)
     echo "Installing Neobundle..."
     if has("unix")
        silent !mkdir -p ~/.vim/bundle
        silent !git clone https://github.com/Shougo/neobundle.vim.git ~/.vim/bundle/neobundle.vim
      endif
     let iCanHazBundle=0
  endif
  set rtp+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#rc(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'

" plugin dependencies
NeoBundle 'Shougo/vimproc'
NeoBundle "MarcWeber/vim-addon-mw-utils"
NeoBundle "tomtom/tlib_vim"
NeoBundle 'rizzatti/funcoo.vim'

" ui
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'kien/rainbow_parentheses.vim'
NeoBundle 'nathanaelkane/vim-indent-guides'
NeoBundle 'vim-scripts/IndexedSearch'
NeoBundle 'vim-scripts/kwbdi.vim'

" menus and special features
" snipmate depends on vim-addon-mw-utils and tlib_vim
NeoBundle 'int3/vim-extradite'
NeoBundle 'jeetsukumaran/vim-buffergator'
NeoBundle 'kien/ctrlp.vim'
NeoBundleLazy 'majutsushi/tagbar',          {'autoload': {'commands': ['TagbarToggle']}, 'build': {'mac': 'brew install ctags'}}
NeoBundle 'Rykka/lastbuf.vim'
NeoBundleLazy 'scrooloose/nerdtree',        {'autoload': {'commands': ['NERDTreeToggle','NERDTree']}}

" commands
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-eunuch'
NeoBundle 'vim-scripts/Rename2'
NeoBundle 'rizzatti/dash.vim'

" editing keys and commands
NeoBundle 'AndrewRadev/switch.vim'
if has('python')
  NeoBundle 'Valloric/YouCompleteMe', {
    \ 'build' : {
    \    'mac' : './install.sh --clang-completer --system-libclang',
    \    'unix' : './install.sh --clang-completer --system-libclang'
    \ },
  \ }
endif
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'edsono/vim-matchit'
NeoBundle 'ervandew/supertab'
NeoBundle 'garbas/vim-snipmate'
NeoBundle 'godlygeek/tabular'
NeoBundle 'maxbrunsfeld/vim-yankstack'
NeoBundle 'michaeljsmith/vim-indent-object'
NeoBundle 'nishigori/vim-sunday'
NeoBundle 'paradigm/TextObjectify'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'scrooloose/syntastic'
if !has('python')
  NeoBundle 'Shougo/neocomplcache' deprecated in favor of ycm
endif
NeoBundle 'tpope/vim-endwise'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-speeddating'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'vim-scripts/AnsiEsc.vim'

" syntax highlighting and filetype specific
NeoBundle 'editorconfig/editorconfig-vim'
NeoBundle 'acustodioo/vim-tmux'
" NeoBundle 'cakebaker/scss-syntax.vim'
NeoBundleLazy 'davejlong/cf-utils.vim',     {'autoload': {'filetypes': ['cfc', 'cfm']}}
NeoBundleLazy 'digitaltoad/vim-jade',       {'autoload': {'filetypes': ['jade']}}
NeoBundle 'gregsexton/MatchTag'
NeoBundleLazy 'groenewege/vim-less',        {'autoload': {'filetypes': ['less']}}
NeoBundleLazy 'hail2u/vim-css3-syntax',     {'autoload': {'filetypes': ['css']}}
NeoBundle 'itspriddle/vim-jquery'
NeoBundleLazy 'juvenn/mustache.vim',        {'autoload': {'filetypes': ['handlebars', 'hbs', 'mustache']}}
NeoBundle 'elzr/vim-json'
"NeoBundle 'leshill/vim-json'
NeoBundleLazy 'mattn/emmet-vim',            {'autoload': {'filetypes': ['html','css','js','php']}}
NeoBundleLazy 'mikehaertl/pdv-standalone',  {'autoload': {'filetypes': ['php', 'blade']}}
NeoBundleLazy 'othree/javascript-libraries-syntax.vim',  {'autoload': {'filetypes': ['js']}}
NeoBundleLazy 'pangloss/vim-javascript',    {'autoload': {'filetypes': ['javascript']}}
NeoBundle 'rodjek/vim-puppet'
NeoBundleLazy 'shawncplus/phpcomplete.vim', {'autoload': {'filetypes': ['php', 'blade']}}
NeoBundleLazy 'skammer/vim-css-color',      {'autoload': {'filetypes': ['html', 'css', 'less', 'sass', 'javascript', 'coffee', 'coffeescript']}}
NeoBundleLazy 'tpope/vim-git',              {'autoload': {'filetypes': ['git']}}
NeoBundleLazy 'tpope/vim-haml',             {'autoload': {'filetypes': ['haml']}}
NeoBundleLazy 'tpope/vim-markdown',         {'autoload': {'filetypes': ['markdown', 'md', 'txt']}}
NeoBundle 'tpope/vim-ragtag'
NeoBundle 'tpope/vim-rails'
NeoBundleLazy 'vadv/vim-chef',              {'autoload': {'filetypes': ['ruby', 'eruby']}}
NeoBundleLazy 'vim-ruby/vim-ruby',          {'autoload': {'filetypes': ['ruby', 'eruby', 'haml']}}

" OS specific bundles
if s:uname == "Darwin\n"
  NeoBundle 'henrik/vim-reveal-in-finder'
endif

" syntax
filetype plugin indent on
syntax on
runtime macros/matchit.vim

""
" init neobundle
NeoBundleCheck

""
" display
set title                             " wintitle = filename - vim
set titleold=""                       " restore title on exit
set background=light
if &term == 'linux' && $COLORTERM != 'gnome-terminal' " not tty mode
  set t_Co=16
  colorscheme elflord
else
  set t_Co=256
  silent! colorscheme solarized       " STFU if no solarized
endif
set number
set numberwidth=5
set cursorline
set scrolloff=3                       " show 2 lines of context
set foldlevel=99                      " show all folds by default
set foldlevelstart=99                 " show all folds by default
set splitbelow
set splitright
set mouse=a

" status line - most of this is handled by vim-powerline
set laststatus=2
set showcmd                           " incomplete commands on

" whitespace
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set backspace=indent,eol,start        " bs anything
set noeol
set nojoinspaces                      " J command doesn't add extra space
"set smartindent -- using filetype indenting instead

" Trailing whitespace
set list
set listchars=""                      " reset
set listchars=tab:→\ 
set listchars+=trail:·
set listchars+=extends:»              " show cut off when nowrap
set listchars+=precedes:«

" search
set hlsearch
set incsearch
set ignorecase
set smartcase
" fix regexes
nnoremap / /\v
vnoremap / /\v

" Wild and file globbing stuff
set browsedir=buffer                  " browse files in same dir as open file
set wildmenu                          " Enhanced command line completion.
set wildmode=list:longest             " Complete files like a shell.
" output, VCS
set wildignore+=*.o,*.out,*.obj,*.exe,*.dll,.git,*.rbc,*.class,.svn,*.gem
set wildignore+=*.gif,*.jpg,*.jpeg,*.png,*.psd,*.ico
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
" bundler and SASS
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*
" JUNK
set wildignore+=*.swp,.lock,.DS_Store,._*

" file saving
set autoread                          " reload files if they were edited elsewhere
set fileformats=unix,mac,dos
set fileformat=unix
set encoding=utf-8

" backups
set noswapfile                        " eff that
set nobackup                          " hate those
set hidden                            " remember undo after quitting

" clipboard -- use os clipboard
if s:uname == "Darwin\n"
  set clipboard=unnamed
else
  set clipboard=unnamedplus
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" filetype specific
if has("autocmd")
  ""
  " Set editor configs
  " @TODO use editorconfig plugin instead
  " Makefiles, Python use real tabs
  au FileType gitconfig   setlocal noexpandtab
  au FileType make        setlocal noexpandtab
  au FileType python      setlocal noexpandtab
  " Enable soft-wrapping for text files
  au FileType text,txt,markdown,html,xhtml,eruby setlocal wrap linebreak nolist textwidth=80

  ""
  " Add syntax highlighting to these filetypes
  " vim-chef support for ruby files (turned off eruby)
  au FileType ruby setlocal filetype=ruby.eruby.chef
  au BufRead,BufNewFile *.conf setlocal filetype=conf
  au BufRead,BufNewFile *.scss setlocal filetype=scss
  au BufRead,BufNewFile *.dump setlocal filetype=sql

  au BufRead,BufNewFile *.cap setlocal filetype=ruby

  ""
  " HBS is a handlebars file
  au BufRead,BufNewFile *.hbs setlocal filetype=mustache

  " crontab on OSX needs a tempfile
  if s:uname == "Darwin\n"
    au BufEnter /private/tmp/crontab.* setlocal backupcopy=yes
  endif

  " Enable omni completion.
  au FileType css           setlocal omnifunc=csscomplete#CompleteCSS
  au FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  au FileType javascript    setlocal omnifunc=javascriptcomplete#CompleteJS
  au FileType python        setlocal omnifunc=pythoncomplete#Complete
  au FileType xml           setlocal omnifunc=xmlcomplete#CompleteTags
  au FileType ruby          setlocal omnifunc=rubycomplete#Complete
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" befores -- plugin settings and keybindings
for f in split(glob('~/.vim/before/*.vim'), '\n')
  exe 'source' f
endfor

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Local config
if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif
