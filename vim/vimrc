set encoding=utf-8 nobomb
scriptencoding utf-8
" note: set encoding BEFORE scriptencoding

" http://www.reddit.com/r/vim/comments/2z2fg0/need_some_inspiration_for_your_vimrc/cpf8zho
" no nocompatible! so we can source the vimrc again if updated
if &compatible | set nocompatible | endif


" ============================================================================
" Default colors
" ============================================================================

let g:has_true_color = exists("$ITERM_BETA") && has('nvim')
if !g:has_true_color
  if $COLORTERM == "gnome-terminal" | set t_Co=256 | endif
  " set this early so plugins can override
  colorscheme pablo
endif


" ============================================================================
" Map <Leader> to Space
" ============================================================================

" no longer using comma so I can reverse repeat fFtT searches
" no longer using \ so I can type escaped chars :/
" needs to be before bundle so plugins map correctly
let mapleader = "\<Space>"

" ============================================================================
" vim-plug
" ============================================================================

" Only load plugins on vim 7.3+ with autocmd
if has("autocmd")
  augroup vimrc
    autocmd!
  augroup END

  if $DOTFILES_DISTRO != "busybox"
    " Load vim-plug
    if empty(glob('~/.vim/autoload/plug.vim'))
      silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall | source $MYVIMRC
    endif

    let g:dko_plugdir = '/plugged'
    if has('nvim')
      let g:dko_plugdir = '/nplugged'
    endif

    call plug#begin($VIM_DOTFILES . g:dko_plugdir)

    " ========================================================================
    " Appearance/tab/split mgmt
    " ========================================================================

    Plug 'chriskempson/base16-vim'

    Plug 'bling/vim-airline'

    " Open help in new tab
    Plug 'airblade/vim-helptab'

    Plug 'now/vim-quit-if-only-quickfix-buffer-left'

    " ========================================================================
    " UI
    " ========================================================================

    " highlight partial matches as you type in search mode
    let g:dko_use_incsearch = 0
    if !has('nvim')
      let g:dko_use_incsearch = 1
      Plug 'haya14busa/incsearch.vim'
    endif

    " show registers in split if use \" or <C-R>
    Plug 'junegunn/vim-peekaboo'

    " Show (#/total results) when searching for a term
    Plug 'osyo-manga/vim-anzu'

    " ========================================================================
    " File system
    " ========================================================================

    " creates dir if new file in new dir
    Plug 'dockyard/vim-easydir'

    Plug 'ludovicchabant/vim-gutentags'

    " ========================================================================
    " Commands
    " ========================================================================

    " Mostly for :Gblame
    Plug 'tpope/vim-fugitive'

    " <F1> fuzzy find
    " <F2> recently used (neomru)
    " <F3> grep
    " <F9> file browser (vimfiler)
    " <F10> tag browser (unite-outline)
    " Most recently used files for unite.vim -- config is in unite.vim
    Plug 'Shougo/vimproc.vim', { 'do': 'make' }
          \| Plug 'Shougo/neomru.vim'
          \| Plug 'Shougo/unite.vim'
          \| Plug 'Shougo/unite-outline'
          \| Plug 'Shougo/vimfiler.vim'

    " <F5> toggle color
    if has('nvim') && g:has_true_color
      Plug 'frankier/neovim-colors-solarized-truecolor-only'
    elseif has('gui_running')
      Plug 'altercation/vim-colors-solarized'
    endif

    " <F6>
    Plug 'nathanaelkane/vim-indent-guides',   { 'on': ['<Plug>IndentGuidesToggle'] }

    " <F7> - command mode with instant results when doing subst %s
    Plug 'osyo-manga/vim-over',               { 'on': ['OverCommandLine'] }

    " <F8> - command mode with tab-completion and suggestions for commands
    Plug 'gelguy/Cmd2.vim',                   { 'on': ['<Plug>(Cmd2Suggest)'] }

    " <F11>
    Plug 'sjl/gundo.vim',                     { 'on': ['GundoToggle'] }

    " Add file manip commands like Remove, Move, Rename, SudoWrite
    Plug 'tpope/vim-eunuch'

    " ========================================================================
    " Completion
    " ========================================================================

    let g:dko_has_completion = 0
    let g:dko_use_deoplete = 0
    let g:dko_use_neocomplete = 0
    let g:dko_use_tern_completion = 0

    if !has('nvim') && has('lua')
      let g:dko_has_completion = 1
      let g:dko_use_neocomplete = 1
      Plug 'Shougo/neocomplete.vim' ", 'ver.2.1'
    endif

    if has('nvim') && has('python3')
      let g:dko_has_completion = 1
      let g:dko_use_deoplete = 1
      Plug 'Shougo/deoplete.nvim'
    endif

    if g:dko_has_completion
      Plug 'Shougo/neco-syntax'

      if g:dko_use_tern_completion
        Plug 'marijnh/tern_for_vim', {
              \   'for': ['javascript', 'typescript'],
              \   'do': 'npm install'
              \ }
      endif

      Plug 'Shougo/neosnippet'
            \| Plug 'honza/vim-snippets'
            \| Plug 'Shougo/neosnippet-snippets'
    endif

    " ========================================================================
    " Editing keys
    " ========================================================================

    Plug 'godlygeek/tabular',                 { 'on': ['Tabularize'] }

    Plug 'rhysd/conflict-marker.vim'

    " ;; or ,, to auto-insert comma or semicolon at end of current line as needed
    Plug 'lfilho/cosco.vim'

    Plug 'svermeulen/vim-easyclip'

    " custom C-x C-a mappings
    Plug 'nishigori/increment-activator'

    Plug 'tomtom/tcomment_vim'

    Plug 'tpope/vim-repeat'

    " fast increment datetimes
    Plug 'tpope/vim-speeddating'

    Plug 'tpope/vim-surround'

    " used for line bubbling commands on osx
    Plug 'tpope/vim-unimpaired'

    " provide iv av for camel and snake case segments auto-determined
    " provide ai and ii for indent blocks
    " provide al and il for current line
    " provide a_ and i_ for underscores
    " provide a- and i-
    Plug 'kana/vim-textobj-user'
          \| Plug 'kana/vim-textobj-indent'
          \| Plug 'kana/vim-textobj-line'
          \| Plug 'mattn/vim-textobj-url'

    " provide {, ", ', [, <, various other block objects
    Plug 'paradigm/TextObjectify'

    " ========================================================================
    " Syntax highlighting, spacing
    " ========================================================================

    " :/ use my own settings
    Plug 'vim-scripts/PreserveNoEOL'
          \| Plug 'editorconfig/editorconfig-vim'

    " highlight matching html tag
    Plug 'gregsexton/MatchTag',               { 'for': ['html', 'mustache', 'php', 'rb', 'xml'] }

    Plug 'scrooloose/syntastic'

    Plug 'vim-scripts/ingo-library' | Plug 'vim-scripts/IndentTab'

    " ========================================================================
    " Language
    " ========================================================================

    " special end syntax for various langs
    Plug 'tpope/vim-endwise'

    " ========================================================================
    " Language: Git
    " ========================================================================

    " creates gitconfig, gitcommit, rebase
    " vim 7.4-77 ships with 2013 version, this is newer
    Plug 'tpope/vim-git'

    " show multipanes when editing a COMMIT_EDITMSG
    Plug 'rhysd/committia.vim'

    " ========================================================================
    " Language: HTML and generators
    " ========================================================================

    Plug 'othree/html5.vim',                  { 'for': ['html', 'php'] }

    Plug 'digitaltoad/vim-jade'

    Plug 'tpope/vim-haml'

    " ========================================================================
    " Language: JavaScript / CoffeeScript
    " ========================================================================

    Plug 'heavenshell/vim-jsdoc'

    " provides coffee ft
    Plug 'kchmck/vim-coffee-script'

    " gf for going to node_modules files
    Plug 'moll/vim-node'

    " react/JSX syn highlighting for .cjsx
    Plug 'mtscout6/vim-cjsx'

    " indenting/highlighting, replaces 'jelera/vim-javascript-syntax', {
    Plug 'othree/yajs.vim'
          \| Plug 'gavocanov/vim-js-indent'

    Plug 'othree/jsdoc-syntax.vim'

    Plug 'othree/jspc.vim'

    " extends syntax for with jQuery,backbone,etc.
    Plug 'othree/javascript-libraries-syntax.vim'

    " mxw/vim-jsx - react/JSX syn highlighting for .jsx
    " requires a javascript syntax plugin first (e.g. yajs or vim-javascript)
    Plug 'mxw/vim-jsx'

    " ========================================================================
    " Language: JSON
    " ========================================================================

    Plug 'elzr/vim-json',                     { 'for': ['json'] }

    " ========================================================================
    " Language: Markdown
    " ========================================================================

    " Override vim included markdown ft* and syntax
    " The git repo has a newer syntax file than the one that ships with vim
    Plug 'tpope/vim-markdown'

    " ========================================================================
    " Language: Mustache.js and Handlebars
    " ========================================================================

    " Creates html.handlebars and other fts and sets syn
    Plug 'mustache/vim-mustache-handlebars'

    " ========================================================================
    " Language: Nginx
    " ========================================================================

    Plug 'moskytw/nginx-contrib-vim'

    " ========================================================================
    " Language: PHP
    " ========================================================================

    " official indent plugin for vim, later version than what it comes with
    Plug '2072/PHP-Indenting-for-VIm', { 'for': ['php', 'blade'] }

    " creates twig ft
    Plug 'evidens/vim-twig'

    Plug 'tobyS/vmustache', { 'for': ['php', 'blade'] }
          \| Plug 'tobyS/pdv', { 'for': ['php', 'blade'] }

    " provides updated syntax
    Plug 'StanAngeloff/php.vim',              { 'for': ['php', 'blade'] }
          \| Plug 'shawncplus/phpcomplete.vim', { 'for': ['php'] }
          "\| Plug 'dsawardekar/wordpress.vim', { 'for': ['php'] }

    " ========================================================================
    " Language: Ruby, rails, chef, puppet
    " ========================================================================

    " creates pp filetype
    Plug 'rodjek/vim-puppet'

    " highlighting for Gemfile
    Plug 'tpope/vim-bundler'

    Plug 'vadv/vim-chef',                     { 'for': ['ruby', 'eruby'] }

    " creates ruby filetype
    Plug 'vim-ruby/vim-ruby'

    " ========================================================================
    " Language: Stylesheets
    " ========================================================================

    "Plug 'Rykka/colorv.vim'

    " creates less filetype
    Plug 'groenewege/vim-less'

    " extends vim's css highlighting
    Plug 'hail2u/vim-css3-syntax',            { 'for': ['css', 'scss'] }

    " css.vim provides @media syntax highlighting where hail2u doesn't
    Plug 'JulesWang/css.vim',                 { 'for': ['css', 'scss'] }
          \| Plug 'cakebaker/scss-syntax.vim'

    " ========================================================================
    " Language: YAML
    " ========================================================================

    Plug 'ingydotnet/yaml-vim'

    call plug#end()
    source $VIM_DOTFILES/rc/plug.vim
  endif
endif


" ============================================================================
" Matchit
" ============================================================================

" From tpope/vim-sensible: load matchit.vim, but only if the user hasn't
" installed a newer version.
" For macvim it is found here:
" /Applications/MacVim.app/Contents/Resources/vim/runtime/macros/matchit.vim
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

" The following is commented out -- run by plug#end() now:
  " load ~/.vim/filetype.vim, ftplugin, ftindent
  "filetype plugin indent on
  " syntax highlighting
  " if has('syntax') && !exists('g:syntax_on')
  "   syntax enable
  " endif

set modeline


" ============================================================================
" For chruby
" ============================================================================

set shell=$SHELL


" ============================================================================
" Display
" ============================================================================

" no beeps or flashes
set visualbell t_vb=
set ttyfast

" don't update the display while executing macros
set lazyredraw

set synmaxcol=512                     " don't syntax highlight long lines

set colorcolumn=80
set title                             " wintitle = filename - vim
set number
set numberwidth=5
set cursorline
set scrolloff=8                       " show 2 lines of context
set sidescrolloff=16
set completeopt-=preview              " don't open scratch preview

" ============================================================================
" Status line - most of this is handled by vim-powerline
" ============================================================================

set laststatus=2
set showcmd                           " incomplete commands on

" ============================================================================
" Code folding
" ============================================================================

set foldcolumn=2
set foldlevel=99                      " show all folds by default
set foldlevelstart=99                 " show all folds by default

" ============================================================================
" Splits
" ============================================================================

set splitbelow
set splitright


" ============================================================================
" Input
" ============================================================================

set formatoptions=
set formatoptions+=c                  " Format comments
set formatoptions+=r                  " Continue comments by default
set formatoptions+=o                  " continue comment using o or O
set formatoptions+=q                  " continue comments with gq
set formatoptions+=n                  " Recognize numbered lists
set formatoptions+=2                  " Use indent from 2nd line of a paragraph
set formatoptions+=l                  " Don't break lines that are already long
set formatoptions+=1                  " Break before 1-letter words
" Vim 7.4 only: no // comment when joining commented lines
if v:version >= 704 | set formatoptions+=j | endif
set nrformats-=octal                  " never use octal when <C-x> or <C-a>
set mouse=a
if !has('nvim') | set ttymouse=xterm | endif


" ============================================================================
" Whitespace
" ============================================================================

set nowrap
set nojoinspaces                      " J command doesn't add extra space

" ============================================================================
" Indenting newlines
" ============================================================================

set autoindent
set smartindent
set copyindent                        " indent exactly as previous line
set nopreserveindent                  " stay indented when press enter
                                      " fixes tab-space in block comments for
                                      " phpdoc/jsdoc

" ============================================================================
" Tabbing
" ============================================================================

set tabstop=4                         " real tabs render 4 wide
set expandtab                         " default to spaces instead of tabs
set shiftwidth=2                      " softtabs are 2 spaces for expandtab

" use multiple of shiftwidth when indenting with '<' and '>'
set shiftround

" negative means use same as shiftwidth
" tabs look like 2 spaces, also alignment
" tabs are two spaces for Indent-Tab
set softtabstop=-2

set smarttab
set backspace=indent,eol,start        " bs anything

" ============================================================================
" Trailing whitespace
" ============================================================================

set list
set listchars=""                      " reset
set listchars=tab:→\ 
set listchars+=trail:·
set listchars+=extends:»              " show cut off when nowrap
set listchars+=precedes:«

set fillchars=diff:⣿,vert:│
set fillchars=diff:⣿,vert:\|


" ============================================================================
" Diffing
" ============================================================================

set diffopt=filler                    " blank lines to keep sides aligned
set diffopt+=iwhite                   " Ignore whitespace changes


" ============================================================================
" Match and search
" ============================================================================

set showmatch                         " hl matching parens
set hlsearch
set incsearch
set wrapscan                          " Searches wrap around end of the file.
set ignorecase
set smartcase

" The Silver Searcher
if executable('ag') | set grepprg=ag\ --nogroup\ --nocolor | endif


" ============================================================================
" Wild and file globbing stuff
" ============================================================================

set browsedir=buffer                  " browse files in same dir as open file
set wildmenu                          " Enhanced command line completion.
set wildmode=list:longest             " Complete files like a shell.
set wildignorecase
" output, VCS
set wildignore+=.git,.hg,.svn
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*,*.gem
set wildignore+=*.aux,*.out,*.toc
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest,*.rbc,*.class
set wildignore+=*.ai,*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png,*.psd,*.webp
set wildignore+=*.avi,*.m4a,*.mp3,*.oga,*.ogg,*.wav,*.webm
set wildignore+=*.eot,*.otf,*.ttf,*.woff
set wildignore+=*.doc,*.pdf
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*.swp,.lock,.DS_Store,._*


" ============================================================================
" File saving
" ============================================================================

"set autoread                         " reload files if they were edited
                                      " elsewhere
set fileformats=unix,mac,dos
set fileformat=unix

" info file
if !has('nvim')
  execute "set viminfo+=n" . expand("$VIM_DOTFILES/.viminfo")
endif

" backups
set noswapfile                        " useless
" Make Vim able to edit crontab files again.
set backupskip=/tmp/*,/private/tmp/*"
" double slash means create dir structure to mirror file's path
set undofile
set undolevels=500
set undoreload=500
set undodir=$VIM_DOTFILES/.undo//
set backupdir=$VIM_DOTFILES/.backup//
set directory=$VIM_DOTFILES/.swp//
set backup
" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))   | call mkdir(expand(&undodir), "p")   | endif
if !isdirectory(expand(&backupdir)) | call mkdir(expand(&backupdir), "p") | endif
if !isdirectory(expand(&directory)) | call mkdir(expand(&directory), "p") | endif


" ============================================================================
" Buffer reuse
" ============================================================================

set hidden                            " remember undo after quitting
set switchbuf=useopen                 " reveal already opened files from the
                                      " quickfix window instead of opening new
                                      " buffers


" ============================================================================
" Clipboard -- use os clipboard
" ============================================================================

if (exists("$DISPLAY") || has('mac')) && has('clipboard')
  set clipboard=unnamed  " Share system clipboard.
  " Share X windows clipboard.
  if has('unnamedplus') | set clipboard+=unnamedplus | endif
endif


" ============================================================================
" Syntax
" ============================================================================

" variable to highlight markdown fenced code properly -- uses tpope's
" vim-markdown plugin (which is bundled with vim7.4 now)
let g:markdown_fenced_languages = [
      \ 'coffee', 'CoffeeScript=coffee',
      \ 'css',
      \ 'erb=eruby',
      \ 'html',
      \ 'javascript', 'js=javascript', 'json=javascript',
      \ 'ruby',
      \ 'sass',
      \ 'xml',
      \ ]


" ============================================================================
" Autocommands
" ============================================================================

if has("autocmd")
  " Resize splits when the window is resized
  autocmd vimrc VimResized * :wincmd =

  " Enable soft-wrapping for text files
  autocmd vimrc FileType text,markdown
        \ setlocal wrap linebreak nolist textwidth=80

  " crontab on OSX needs a tempfile
  if has('mac')
    autocmd vimrc BufEnter /private/tmp/crontab.*
          \ setlocal backupcopy=yes
  endif

  " see after/ftplugin/*.vim for more filetype specific stuff
endif

" leave this down here since it trims local settings
set secure                            " no unsafe local vimrc commands

if filereadable(glob("$HOME/.vimrc.local")) | source $HOME/.vimrc.local | endif

" vim: syntax=vim :
