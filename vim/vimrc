set nocompatible

" determine env
if has("unix")
  let s:uname = system("uname")
endif

" plugin management
"filetype off
if has("vim_starting")
  set nocompatible
  set rtp+=~/.vim/bundle/neobundle.vim/
endif
call neobundle#rc(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'

" Map <Leader> to comma
let mapleader = ","

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" plugin dependencies
NeoBundle 'Shougo/vimproc', {
      \   'build': {
      \     'windows': 'make -f make_mingw32.mak',
      \     'cygwin':  'make -f make_cygwin.mak',
      \     'mac':     'make -f make_mac.mak',
      \     'unix':    'make -f make_unix.mak',
      \   }
      \ }
NeoBundle 'MarcWeber/vim-addon-mw-utils'
NeoBundle 'tomtom/tlib_vim'
NeoBundle 'rizzatti/funcoo.vim'
NeoBundle 'kana/vim-operator-user', {
      \   'autoload' : {
      \     'functions' : 'operator#user#define'
      \   }
      \ }

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ui
NeoBundle 'altercation/vim-colors-solarized'
  if neobundle#tap('vim-colors-solarized')
    call togglebg#map("<F5>")
    call neobundle#untap()
  endif
NeoBundle 'itchyny/lightline.vim'
  let g:lightline = {
        \   'active': {
        \     'left': [
        \         [ 'mode', 'paste' ],
        \         [ 'fugitive', 'readonly', 'filename', 'modified' ]
        \     ]
        \   },
        \   'component': {
        \     'readonly': '%{&filetype=="help"?"":&readonly?"⭤":""}',
        \     'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
        \     'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
        \   },
        \   'component_visible_condition': {
        \     'readonly': '(&filetype!="help"&& &readonly)',
        \     'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
        \     'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
        \   },
        \ }
NeoBundle 'kien/tabman.vim'
  nnoremap <F2> :TMToggle<CR>
NeoBundle 'kien/ctrlp.vim'
  let g:ctrlp_map = '<c-t>'
NeoBundle 'mhinz/vim-hugefile'
NeoBundle 'mhinz/vim-startify'
  let g:startify_change_to_vcs_root = 1
  let g:startify_custom_header = [
  \ ' (╯°□°)╯ ┻━┻  ',
  \ '',
  \ ]
NeoBundle 'nathanaelkane/vim-indent-guides'
  nnoremap <F7> :IndentGuidesToggle<CR>
NeoBundle 'vim-scripts/IndexedSearch'
NeoBundle 'vim-scripts/kwbdi.vim'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" menus and special features
if s:uname == "Darwin\n"
  NeoBundle 'henrik/vim-reveal-in-finder'
endif
NeoBundle 'jeetsukumaran/vim-buffergator'
  nnoremap <F3> :BuffergatorToggle<CR>
if executable("ctags")
  NeoBundle 'majutsushi/tagbar', {
        \   'autoload': {
        \     'commands': [ 'TagbarClose', 'TagbarOpen', 'TagbarToggle' ]
        \   }
        \ }
    let g:tagbar_show_linenumbers = 1     " Show absolute line numbers
    nnoremap <F4> :TagbarToggle<CR>
endif
NeoBundle 'Rykka/lastbuf.vim'
NeoBundleLazy 'scrooloose/nerdtree', {
      \   'autoload': {
      \     'commands': [ 'NERDTreeFind', 'NERDTreeToggle', 'NERDTree' ]
      \   }
      \ }
  let g:NERDTreeShowHidden = 1
  nnoremap <F1> :NERDTreeToggle %<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" commands
NeoBundle 'osyo-manga/vim-over'
if has("gui_macvim")
  NeoBundle 'rizzatti/dash.vim', {
        \   'depends': 'rizzatti/funcoo.vim'
        \ }
endif
NeoBundle 'Keithbsmiley/investigate.vim'
  let g:investigate_use_dash=1
NeoBundle 'rking/ag.vim'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-eunuch'
NeoBundle 'vim-scripts/Rename2'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" editing keys
if has("python")
  NeoBundle 'Valloric/YouCompleteMe', {
      \   'build' : {
      \     'mac' : './install.sh --clang-completer --system-libclang',
      \     'unix' : './install.sh --clang-completer --system-libclang'
      \   }
      \ }
endif
NeoBundle 'edsono/vim-matchit'
NeoBundle 'ervandew/supertab'
  let g:SuperTabDefaultCompletionType = "context"
  let g:SuperTabContextDefaultCompletionType = "<c-n>"
NeoBundle 'garbas/vim-snipmate', {
      \   'depends': [ 'MarcWeber/vim-addon-mw-utils', 'tomtom/tlib_vim' ]
      \ }
NeoBundle 'godlygeek/tabular'
  nmap <Leader>a- :Tabularize /-<CR>
  vmap <Leader>a- :Tabularize /-<CR>
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a: :Tabularize /:\zs<CR>
  vmap <Leader>a: :Tabularize /:\zs<CR>
  nmap <Leader>a, :Tabularize /,<CR>
  vmap <Leader>a, :Tabularize /,<CR>
  nmap <Leader>af :Tabularize /=>/<CR>
  vmap <Leader>af :Tabularize /=>/<CR>
NeoBundle 'jaxbot/github-issues.vim'
NeoBundle 'maxbrunsfeld/vim-yankstack'
  let g:yankstack_map_keys = 0
  nmap <C-p> <Plug>yankstack_substitute_newer_paste
  nmap <C-P> <Plug>yankstack_substitute_older_paste
NeoBundle 'nishigori/increment-activator'
NeoBundle 'scrooloose/nerdcommenter'
if !has("python")
  NeoBundle 'Shougo/neocomplcache'
    let g:neocomplcache_enable_at_startup            = 1
    let g:neocomplcache_enable_smart_case            = 1
    let g:neocomplcache_enable_camel_case_completion = 1
    let g:neocomplcache_enable_underbar_completion   = 1
    " default # of completions is 100, that's crazy
    let g:neocomplcache_max_list = 10
    " words less than 3 letters long aren't worth completing
    let g:neocomplcache_min_syntax_length = 3
    " start filling in after 2 chars
    let g:neocomplcache_auto_completion_start_length = 2
    " This makes sure we use neocomplcache completefunc instead of
    " the one in rails.vim, otherwise this plugin will crap out
    let g:neocomplcache_force_overwrite_completefunc = 1
    " Enable heavy omni completion.
    if !exists('g:neocomplcache_omni_patterns')
      let g:neocomplcache_omni_patterns = {}
    endif
    let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
    if has("autocmd")
      au FileType css           setlocal omnifunc=csscomplete#CompleteCSS
      au FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
      au FileType javascript    setlocal omnifunc=javascriptcomplete#CompleteJS
      au FileType python        setlocal omnifunc=pythoncomplete#Complete
      au FileType xml           setlocal omnifunc=xmlcomplete#CompleteTags
      au FileType ruby          setlocal omnifunc=rubycomplete#Complete
    endif
endif
NeoBundle 'tpope/vim-endwise'
NeoBundle 'tpope/vim-repeat', {
      \   'autoload': { 'mappings': '.' }
      \ }
NeoBundle 'tpope/vim-speeddating'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'tyru/operator-camelize.vim', {
      \   'depends': 'vim-operator-user',
      \   'autoload': {
      \     'mappings': [
      \       [ '<Plug>(operator-camelize-)' ]
      \     ]
      \   }
      \ }
      nmap <c-c> <Plug>(operator-camelize-toggle)
NeoBundle 'kana/vim-operator-replace', {
      \   'depends': 'vim-operator-user',
      \   'autoload': {
      \     'mappings': [
      \       [ 'nx', '<Plug>(operator-replace)' ],
      \     ],
      \   }
      \ }
      map _ <Plug>(operator-replace)
NeoBundle 'vim-scripts/AnsiEsc.vim'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" text objects
NeoBundle 'kana/vim-textobj-entire', {
      \   'depends': 'vim-textobj-user',
      \ }
NeoBundle 'kana/vim-textobj-indent', {
      \   'depends': 'vim-textobj-user',
      \ }
NeoBundle 'kana/vim-textobj-user'
NeoBundle 'lucapette/vim-textobj-underscore', {
      \   'depends': 'vim-textobj-user',
      \ }
NeoBundle 'paradigm/TextObjectify'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" syntax highlighting and filetype specific
NeoBundleLazy 'acustodioo/vim-tmux'
NeoBundle 'alampros/cf.vim', {
      \   'autoload': { 'filetypes': [ 'cfc', 'cfm' ] }
      \ }
" NeoBundle 'cakebaker/scss-syntax.vim'
NeoBundle 'davejlong/cf-utils.vim', {
      \   'autoload': { 'filetypes': [ 'cfc', 'cfm' ] }
      \ }
NeoBundleLazy 'digitaltoad/vim-jade', {
      \   'autoload': { 'filetypes': ['jade'] }
      \ }
if has("python")
  NeoBundle 'editorconfig/editorconfig-vim'
  let g:EditorConfig_core_mode = 'python_builtin'
  let g:EditorConfig_python_files_dir = $DOTFILES . "/vim/bundle/editorconfig-vim/plugin/editorconfig-core-py"
endif
NeoBundleLazy 'gregsexton/MatchTag'
NeoBundleLazy 'groenewege/vim-less', {
      \   'autoload': {'filetypes': ['less']}
      \ }
  if has("autocmd")
    au FileType less nnoremap <Leader>lc :w <BAR> !lessc % > %:t:r.css<CR><space>
  endif
NeoBundleLazy 'hail2u/vim-css3-syntax', {
      \   'autoload': { 'filetypes': ['css'] }
      \ }
NeoBundleLazy 'itspriddle/vim-jquery'
NeoBundleLazy 'juvenn/mustache.vim', {
      \   'autoload': { 'filetypes': ['handlebars', 'hbs', 'mustache'] }
      \ }
NeoBundleLazy 'elzr/vim-json', {
      \   'autoload': { 'filetypes': 'json' }
      \ }
"NeoBundle 'leshill/vim-json'
NeoBundle 'mattn/emmet-vim'
NeoBundleLazy 'mikehaertl/pdv-standalone', {
      \   'autoload': { 'filetypes': ['php', 'blade'] }
      \ }
  if has("autocmd")
    au FileType php nnoremap <Leader>pd :call PhpDocSingle()<CR>
    au FileType php vnoremap <Leader>pd :call PhpDocRange()<CR>
  endif
NeoBundleLazy 'othree/javascript-libraries-syntax.vim', {
      \   'autoload': { 'filetypes': ['js'] }
      \ }
NeoBundleLazy 'pangloss/vim-javascript', {'autoload': {'filetypes': ['javascript']}}
NeoBundleLazy 'rodjek/vim-puppet'
NeoBundle 'scrooloose/syntastic'
  " run syntastic on file open
  let g:syntastic_check_on_open       = 1
  let g:syntastic_auto_loc_list       = 1
  let g:syntastic_enable_signs        = 1
  let g:syntastic_enable_highlighting = 1
  if !exists("g:syntastic_mode_map")
    let g:syntastic_mode_map = {}
  endif
  if !has_key(g:syntastic_mode_map, "mode")
    let g:syntastic_mode_map['mode'] = 'active'
  endif
  if !has_key(g:syntastic_mode_map, "active_filetypes")
    let g:syntastic_mode_map['active_filetypes'] = []
  endif
  if !has_key(g:syntastic_mode_map, "passive_filetypes")
    let g:syntastic_mode_map['passive_filetypes'] = ['python', 'html']
  endif
NeoBundleLazy 'shawncplus/phpcomplete.vim', {
      \   'autoload': { 'filetypes': ['php', 'blade'] }
      \ }
NeoBundleLazy 'ap/vim-css-color', {
      \   'autoload': {
      \     'filetypes': [ 'html', 'css', 'less', 'scss', 'sass', 'javascript', 'coffee', 'coffeescript' ]
      \   }
      \ }
NeoBundleLazy 'tpope/vim-git', {'autoload': {'filetypes': ['git']}}
NeoBundleLazy 'tpope/vim-haml', {'autoload': {'filetypes': ['haml']}}
NeoBundleLazy 'tpope/vim-markdown', {
      \   'autoload': { 'filetypes': ['markdown', 'md', 'txt'] }
      \ }
NeoBundle 'tpope/vim-ragtag'
NeoBundle 'tpope/vim-rails'
NeoBundleLazy 'vadv/vim-chef', {'autoload': {'filetypes': ['ruby', 'eruby']}}
NeoBundleLazy 'vim-php/tagbar-phpctags.vim', {
      \   'autoload': { 'filetypes': ['php'] },
      \   'build': {
      \     'mac': 'make',
      \     'unix': 'make',
      \    },
      \ }
NeoBundleLazy 'vim-ruby/vim-ruby', {
      \   'autoload': { 'filetypes': ['ruby', 'eruby', 'haml'] }
      \ }

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" init
filetype plugin indent on
syntax on
runtime macros/matchit.vim
NeoBundleCheck

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" display
set title                             " wintitle = filename - vim
set titleold=""                       " restore title on exit
set background=light
if &term == 'linux' && $COLORTERM != 'gnome-terminal' " not tty mode
  set t_Co=16
  colorscheme elflord
else
  set t_Co=256
  silent! colorscheme solarized       " STFU if no solarized
endif
set number
set numberwidth=5
set cursorline
set scrolloff=3                       " show 2 lines of context
set foldlevel=99                      " show all folds by default
set foldlevelstart=99                 " show all folds by default
set splitbelow
set splitright
set mouse=a

" status line - most of this is handled by vim-powerline
set laststatus=2
set showcmd                           " incomplete commands on

" whitespace
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set backspace=indent,eol,start        " bs anything
set noeol
set nojoinspaces                      " J command doesn't add extra space
"set smartindent -- using filetype indenting instead

" Trailing whitespace
set list
set listchars=""                      " reset
set listchars=tab:→\ 
set listchars+=trail:·
set listchars+=extends:»              " show cut off when nowrap
set listchars+=precedes:«

" search
set hlsearch
set incsearch
" Searches wrap around the end of the file.
set wrapscan
set ignorecase
set smartcase
" fix regexes
nnoremap / /\v
vnoremap / /\v
" The Silver Searcher
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
endif

" Wild and file globbing stuff
set browsedir=buffer                  " browse files in same dir as open file
set wildmenu                          " Enhanced command line completion.
set wildmode=list:longest             " Complete files like a shell.
" output, VCS
set wildignore+=.hg,.svn
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*,*.gem
set wildignore+=*.aux,*.out,*.toc
set wildignore+=*.o,*.obj,*.exe,*.dll,.git,*.rbc,*.class
set wildignore+=*.ai,*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png,*.psd,*.webp
set wildignore+=*.avi,*.m4a,*.mp3,*.oga,*.ogg,*.wav,*.webm
set wildignore+=*.eot,*.otf,*.ttf,*.woff
set wildignore+=*.doc,*.pdf
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*.swp,.lock,.DS_Store,._*

" file saving
"set autoread                          " reload files if they were edited elsewhere
set fileformats=unix,mac,dos
set fileformat=unix
set encoding=utf-8

" backups
set noswapfile                        " eff that
set nobackup                          " hate those
set hidden                            " remember undo after quitting

" clipboard -- use os clipboard
if has('unnamedplus')
  set clipboard=unnamedplus  " Share X windows clipboard.
else
  set clipboard=unnamed  " Share system clipboard.
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" filetype specific
if has("autocmd")
  " Set editor configs
  " @TODO use editorconfig plugin instead
  " Makefiles, Python use real tabs
  au FileType gitconfig   setlocal noexpandtab
  au FileType make        setlocal noexpandtab
  au FileType python      setlocal noexpandtab
  " Enable soft-wrapping for text files
  au FileType text,txt,markdown,html,xhtml,eruby setlocal wrap linebreak nolist textwidth=80

  " Add syntax highlighting to these filetypes
  " vim-chef support for ruby files (turned off eruby)
  au FileType ruby setlocal filetype=ruby.eruby.chef
  au BufRead,BufNewFile *.conf setlocal filetype=conf
  au BufRead,BufNewFile *.scss setlocal filetype=scss
  au BufRead,BufNewFile *.dump setlocal filetype=sql

  au BufRead,BufNewFile *.cap setlocal filetype=ruby

  " HBS is a handlebars file
  au BufRead,BufNewFile *.hbs setlocal filetype=mustache

  " crontab on OSX needs a tempfile
  if s:uname == "Darwin\n"
    au BufEnter /private/tmp/crontab.* setlocal backupcopy=yes
  endif

endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" keyboard - most of this is straight from Janus

" Disable vim help
inoremap <F1> <nop>

" Toggle paste mode
nnoremap <silent> <F12> :set invpaste<CR>:set paste?<CR>
inoremap <silent> <F12> <ESC>:set invpaste<CR>:set paste?<CR>

" Map the arrow keys to be based on display lines, not physical lines
map <Down> gj
map <Up> gk

" Use Ctrl-U/D for pg up and pg dn, maintains cursor position on screen
" http://github.com/gf3/dotfiles/blob/fe8bba3711181728c670cad2d585705d8e68c5b7/.vimrc
map <PageUp> <C-U>
map <PageDown> <C-D>
imap <PageUp> <C-O><C-U>
imap <PageDown> <C-O><C-D>

" fix typo !W to !w
" https://bitbucket.org/sjl/dotfiles/src/tip/vim/.vimrc
command! -bang W w<bang>

" cd to the directory containing the file in the buffer
nnoremap <silent> <Leader>cd :lcd %:h<CR>

function! ChangeToVCSRoot()
  let cph = expand('%:p:h', 1)
  if match(cph, '\v^<.+>://') >= 0 | retu | en
  for mkr in ['.git/', '.hg/', '.svn/', '.bzr/', '_darcs/', '.vimprojects']
    let wd = call('find'.(mkr =~ '/$' ? 'dir' : 'file'), [mkr, cph.';'])
    if wd != '' | let &acd = 0 | brea | en
  endfo
  exe 'lc!' fnameescape(wd == '' ? cph : substitute(wd, mkr.'$', '.', ''))
endfunction
nnoremap <silent> <Leader>cdr :call ChangeToVCSRoot()<CR>

" Create the directory containing the file in the buffer
nnoremap <silent> <Leader>md :!mkdir -p %:p:h<CR>

" upper/lower word
nmap <Leader>u mQviwU`Q
nmap <Leader>l mQviwu`Q

" Toggle hlsearch with <Leader>hs
nnoremap <Leader>hs :set hlsearch! hlsearch?<CR>

if has("gui_macvim") && has("gui_running")
  " Map command-[ and command-] to indenting or outdenting
  " while keeping the original selection in visual mode
  vmap <D-]> >gv
  vmap <D-[> <gv

  nmap <D-]> >>
  nmap <D-[> <<

  omap <D-]> >>
  omap <D-[> <<

  imap <D-]> <Esc>>>i
  imap <D-[> <Esc><<i

  " Bubble single lines - REQUIRES tim pope's unimpaired
  nmap <D-Up> [e
  nmap <D-Down> ]e
  nmap <D-k> [e
  nmap <D-j> ]e

  " Bubble multiple lines
  vmap <D-Up> [egv
  vmap <D-Down> ]egv
  vmap <D-k> [egv
  vmap <D-j> ]egv

  " Map Command-# to switch tabs
  map  <D-0> 0gt
  imap <D-0> <Esc>0gt
  map  <D-1> 1gt
  imap <D-1> <Esc>1gt
  map  <D-2> 2gt
  imap <D-2> <Esc>2gt
  map  <D-3> 3gt
  imap <D-3> <Esc>3gt
  map  <D-4> 4gt
  imap <D-4> <Esc>4gt
  map  <D-5> 5gt
  imap <D-5> <Esc>5gt
  map  <D-6> 6gt
  imap <D-6> <Esc>6gt
  map  <D-7> 7gt
  imap <D-7> <Esc>7gt
  map  <D-8> 8gt
  imap <D-8> <Esc>8gt
  map  <D-9> 9gt
  imap <D-9> <Esc>9gt
else
  " Map command-[ and command-] to indenting or outdenting
  " while keeping the original selection in visual mode
  vmap <A-]> >gv
  vmap <A-[> <gv

  nmap <A-]> >>
  nmap <A-[> <<

  omap <A-]> >>
  omap <A-[> <<

  imap <A-]> <Esc>>>i
  imap <A-[> <Esc><<i

  " Bubble single lines
  nmap <C-Up> [e
  nmap <C-Down> ]e
  nmap <C-k> [e
  nmap <C-j> ]e

  " Bubble multiple lines
  vmap <C-Up> [egv
  vmap <C-Down> ]egv
  vmap <C-k> [egv
  vmap <C-j> ]egv

  " Make shift-insert work like in Xterm
  map <S-Insert> <MiddleMouse>
  map! <S-Insert> <MiddleMouse>

  " Map Control-# to switch tabs
  map  <C-0> 0gt
  imap <C-0> <Esc>0gt
  map  <C-1> 1gt
  imap <C-1> <Esc>1gt
  map  <C-2> 2gt
  imap <C-2> <Esc>2gt
  map  <C-3> 3gt
  imap <C-3> <Esc>3gt
  map  <C-4> 4gt
  imap <C-4> <Esc>4gt
  map  <C-5> 5gt
  imap <C-5> <Esc>5gt
  map  <C-6> 6gt
  imap <C-6> <Esc>6gt
  map  <C-7> 7gt
  imap <C-7> <Esc>7gt
  map  <C-8> 8gt
  imap <C-8> <Esc>8gt
  map  <C-9> 9gt
  imap <C-9> <Esc>9gt
endif

" Keep search pattern at the center of the screen.
" http://vimbits.com/bits/92
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
nnoremap <silent> g# g#zz

" Space to toggle folds.
" https://bitbucket.org/sjl/dotfiles/src/tip/vim/.vimrc
nnoremap <Space> za
vnoremap <Space> za

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" My Tab and Split manipulation
nnoremap <Leader>v :vsplit<cr>
" resize vertical splits
nmap <Leader>_ <C-w>>
nmap <Leader>+ <C-w><
" resize horizontal splits
nmap <Leader>- <C-w>-
nmap <Leader>= <C-w>+
" swap splits with ,mw (mark this one) and ,pw (swap with this one)
" http://stackoverflow.com/questions/2586984/how-can-i-swap-positions-of-two-open-files-in-splits-in-vim
function! MarkWindowSwap()
  let g:markedWinNum = winnr()
endfunction
function! DoWindowSwap()
  "Mark destination
  let curNum = winnr()
  let curBuf = bufnr( "%" )
  exe g:markedWinNum . "wincmd w"
  "Switch to source and shuffle dest->source
  let markedBuf = bufnr( "%" )
  "Hide and open so that we aren't prompted and keep history
  exe 'hide buf' curBuf
  "Switch to dest and shuffle source->dest
  exe curNum . "wincmd w"
  "Hide and open so that we aren't prompted and keep history
  exe 'hide buf' markedBuf
endfunction
nnoremap <silent> <Leader>mw :call MarkWindowSwap()<CR>
nnoremap <silent> <Leader>pw :call DoWindowSwap()<CR>

" Navigate splits
nnoremap <silent> <C-k> :wincmd k<CR>
nnoremap <silent> <C-j> :wincmd j<CR>
nnoremap <silent> <C-h> :wincmd h<CR>
nnoremap <silent> <C-l> :wincmd l<CR>

" Navigate tabs
nnoremap <silent> <Leader>l :tabnext<CR>
nnoremap <silent> <Leader>h :tabprevious<CR>
nnoremap <silent> <Leader>j :tabfirst<CR>
nnoremap <silent> <Leader>k :tablast<CR>

" Clean code function
function! CleanCode()
  %retab " Replace tabs with spaces
  %s/\r/\r/eg " Turn DOS returns ^M into real returns
  %s= *$==e " Delete end of line blanks
  echo "Cleaned up this mess."
endfunction
nnoremap <Leader>ws :call CleanCode()<cr>

" Stephen Hawking
nnoremap <silent> <Leader>? :silent !say <cword><CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Local config
if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif
