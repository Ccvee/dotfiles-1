scriptencoding utf-8

set nocompatible
set encoding=utf-8 nobomb

" Environment detection a la https://github.com/bling/dotvim
" detect OS
let g:is_windows = has('win32') || has('win64')
let g:is_cygwin = has('win32unix')
let g:is_macvim = has('gui_macvim')
let g:is_term = (&term =~ "xterm") || (&term =~ "screen")

let g:settings = {}
let g:settings.autocomplete_method = 'neocomplcache'
if has('lua')
  let g:settings.autocomplete_method = 'neocomplete'
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" display
set ttyfast
set lazyredraw                        " don't update the display while
                                      " executing macros
set synmaxcol=256                     " don't syntax highlight long lines

if has('gui_running')
  set background=light
else
  if g:is_term
    set t_Co=16
  endif
  set background=dark
endif
if exists('&colorcolumn')
  set colorcolumn=80
endif
set title                             " wintitle = filename - vim
set number
set numberwidth=5
set cursorline
set scrolloff=3                       " show 2 lines of context

" folds
set foldcolumn=2
set foldlevel=99                      " show all folds by default
set foldlevelstart=99                 " show all folds by default

" splits
set splitbelow
set splitright
" Resize splits when the window is resized
au VimResized * :wincmd =

" input
set formatoptions=
set formatoptions+=c                  " Format comments
set formatoptions+=r                  " Continue comments by default
set formatoptions+=o                  " continue comment using o or O
set formatoptions+=q                  " continue comments with gq
set formatoptions+=n                  " Recognize numbered lists
set formatoptions+=2                  " Use indent from 2nd line of a paragraph
set formatoptions+=l                  " Don't break lines that are already long
set formatoptions+=1                  " Break before 1-letter words
set nrformats-=octal                  " never use octal when <C-x> or <C-a>
set nojoinspaces                      " J command doesn't add extra space
set mouse=a
set ttymouse=xterm

" status line - most of this is handled by vim-powerline
set laststatus=2
set showcmd                           " incomplete commands on

" whitespace
set binary noeol                      " binary mode required for noeol
set nowrap
set autoindent
set preserveindent                    " stay indented when press enter
set expandtab                         " spaces instead of tabs
set tabstop=2
set shiftwidth=2
set shiftround                        " use multiple of shiftwidth when
                                      " indenting with '<' and '>'
set softtabstop=2                     " tabs look like 2 spaces
set backspace=indent,eol,start        " bs anything

" Trailing whitespace
set list
set listchars=""                      " reset
set listchars=tab:→\ 
set listchars+=trail:·
set listchars+=extends:»              " show cut off when nowrap
set listchars+=precedes:«

set fillchars=diff:⣿,vert:│
set fillchars=diff:⣿,vert:\|

" diffing
set diffopt=filler                    " blank lines to keep sides aligned
set diffopt+=iwhite                   " Ignore whitespace changes

" match and search
set showmatch                         " hl matching parens
set hlsearch
set incsearch
set wrapscan                          " Searches wrap around end of the file.
set ignorecase
set smartcase
" fix regexes
nnoremap / /\v
vnoremap / /\v
" The Silver Searcher
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
endif

" Wild and file globbing stuff
set browsedir=buffer                  " browse files in same dir as open file
set wildmenu                          " Enhanced command line completion.
set wildmode=list:longest             " Complete files like a shell.
" output, VCS
set wildignore+=.git,.hg,.svn
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*,*.gem
set wildignore+=*.aux,*.out,*.toc
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest,*.rbc,*.class
set wildignore+=*.ai,*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png,*.psd,*.webp
set wildignore+=*.avi,*.m4a,*.mp3,*.oga,*.ogg,*.wav,*.webm
set wildignore+=*.eot,*.otf,*.ttf,*.woff
set wildignore+=*.doc,*.pdf
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*.swp,.lock,.DS_Store,._*

" file saving
"set autoread                         " reload files if they were edited
                                      " elsewhere
set fileformats=unix,mac,dos
set fileformat=unix

" backups
set noswapfile                        " eff that
set nobackup                          " hate those
set nowritebackup                     " hate those

" buffer reuse
set hidden                            " remember undo after quitting
set switchbuf=useopen                 " reveal already opened files from the
                                      " quickfix window instead of opening new
                                      " buffers

" clipboard -- use os clipboard
"if has('clipboard')
  "set clipboard=unnamed  " Share system clipboard.

  "if has('unnamedplus')
    "set clipboard+=unnamedplus  " Share X windows clipboard.
  "endif
"endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RTP and plugin management
if has("vim_starting")
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif
call neobundle#rc(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'

""
" Mappings
" Map <Leader> to comma
let g:mapleader = ","
if filereadable(expand("~/.vim/mappings.vim"))
  source ~/.vim/mappings.vim
endif

""
" Autocommands
if has("autocmd")
  " Force filetypes
  " vim-chef support for ruby files (turned off eruby)
  au FileType ruby setlocal filetype=ruby.eruby.chef
  au BufRead,BufNewFile *.bowerrc   setlocal filetype=json
  au BufRead,BufNewFile *.cap       setlocal filetype=ruby
  au BufRead,BufNewFile *.conf      setlocal filetype=conf
  au BufRead,BufNewFile *.jshintrc  setlocal filetype=json
  au BufRead,BufNewFile *.dump      setlocal filetype=sql
  au BufRead,BufNewFile *.scss      setlocal filetype=scss

  " Set editor configs
  " use real tabs
  au FileType gitconfig   setlocal noexpandtab
  au FileType make        setlocal noexpandtab

  " force 2sp for js
  au FileType javascript setlocal softtabstop=2 tabstop=2 shiftwidth=2

  " make Python follow PEP8 for whitespace
  " http://www.python.org/dev/peps/pep-0008/
  au FileType python setlocal softtabstop=4 tabstop=4 shiftwidth=4

  " 4space for gitconfig
  au FileType gitconfig setlocal softtabstop=4 tabstop=4 shiftwidth=4

  " Enable soft-wrapping for text files
  au FileType text setlocal wrap linebreak nolist textwidth=80

  " crontab on OSX needs a tempfile
  if g:is_macvim
    au BufEnter /private/tmp/crontab.* setlocal backupcopy=yes
  endif

  au FileType css           setlocal omnifunc=csscomplete#CompleteCSS
  au FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  au FileType javascript    setlocal omnifunc=javascriptcomplete#CompleteJS
  au FileType python        setlocal omnifunc=pythoncomplete#Complete
  au FileType xml           setlocal omnifunc=xmlcomplete#CompleteTags
  au FileType ruby          setlocal omnifunc=rubycomplete#Complete
endif

""
" Abbreviations :)
ab lod: ಠ_ಠ
ab flip: (ﾉಥ益ಥ）ﾉ︵┻━┻
ab yuno: ლ(ಠ益ಠლ)

""
" NeoBundles
if filereadable(expand("~/.vim/plugins.vim"))
  source ~/.vim/plugins.vim
endif

""
" Local config
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" init
call neobundle#end()
filetype plugin indent on
syntax on
runtime macros/matchit.vim
