set encoding=utf-8 nobomb
scriptencoding utf-8
" note: set encoding BEFORE scriptencoding

" http://www.reddit.com/r/vim/comments/2z2fg0/need_some_inspiration_for_your_vimrc/cpf8zho
" no nocompatible! so we can source the vimrc again if updated
if &compatible | set nocompatible | endif

let g:dko_vim_dir = fnamemodify(resolve(expand("$MYVIMRC")), ":p:h")

" ============================================================================
" Settings vars
" ============================================================================

" Used by anything that needs to change/use loc list (e.g. syntastic)
let g:dko_loc_list_height = 10

" ============================================================================
" My autocmd block - Clear vimrc group's autocmds if reloading
" ============================================================================
if has('autocmd')
  augroup vimrc
    autocmd!
  augroup END
endif

" ============================================================================
" My defaults
" May be overridden by **/plugins, after/plugins and **/ftplugins
" ============================================================================

" ----------------------------------------------------------------------------
" Default colors
" ----------------------------------------------------------------------------

let g:dko_has_true_color = exists("$ITERM_BETA")
if !g:dko_has_true_color
  if $COLORTERM == 'gnome-terminal' | set t_Co=256 | endif
  " set this early so plugins can override
  colorscheme pablo
endif

" ----------------------------------------------------------------------------
" Map <Leader> to Space
" ----------------------------------------------------------------------------

" no longer using comma so I can reverse repeat fFtT searches
" no longer using \ so I can type escaped chars :/
" needs to be before bundle so plugins map correctly
let g:mapleader = "\<Space>"

" ----------------------------------------------------------------------------
" Faster response
" ----------------------------------------------------------------------------

set notimeout
set ttimeout
set ttimeoutlen=10

" ----------------------------------------------------------------------------
" For chruby
" ----------------------------------------------------------------------------

set shell=$SHELL

" ----------------------------------------------------------------------------
" Display
" ----------------------------------------------------------------------------

" no beeps or flashes
set visualbell t_vb=
set ttyfast

" don't update the display while executing macros
set lazyredraw

set synmaxcol=512                     " don't syntax highlight long lines

set colorcolumn=80
set title                             " wintitle = filename - vim
set number
set numberwidth=5
set cursorline
set scrolloff=8                       " show 2 lines of context
set sidescrolloff=16
set completeopt-=preview              " don't open scratch preview

" ----------------------------------------------------------------------------
" Status line - most of this is handled by vim-airline
" ----------------------------------------------------------------------------

set laststatus=2
set showcmd                           " incomplete commands on

" ----------------------------------------------------------------------------
" Code folding
" ----------------------------------------------------------------------------

set foldcolumn=2
set foldlevel=99                      " show all folds by default
set foldlevelstart=99                 " show all folds by default

" ----------------------------------------------------------------------------
" Splits
" ----------------------------------------------------------------------------

set splitbelow
set splitright
set fillchars=vert:\|                " Vertical separator for splits

" ----------------------------------------------------------------------------
" Input
" ----------------------------------------------------------------------------

set formatoptions=
set formatoptions+=c                  " Auto-wrap comments using textwidth
set formatoptions+=r                  " Continue comments by default
set formatoptions-=o                  " do not continue comment using o or O
set formatoptions+=q                  " continue comments with gq
set formatoptions+=n                  " Recognize numbered lists
set formatoptions+=2                  " Use indent from 2nd line of a paragraph
set formatoptions+=l                  " Don't break lines that are already long
set formatoptions+=1                  " Break before 1-letter words
" Vim 7.4 only: no // comment when joining commented lines
if v:version >= 704 | set formatoptions+=j | endif
set nrformats-=octal                  " never use octal when <C-x> or <C-a>
set mouse=a
if !has('nvim') | set ttymouse=xterm | endif

" ----------------------------------------------------------------------------
" Whitespace
" ----------------------------------------------------------------------------

set nowrap
set nojoinspaces                      " J command doesn't add extra space

" ----------------------------------------------------------------------------
" Indenting newlines
" ----------------------------------------------------------------------------

set autoindent                        " indent when creating newline
set smartindent                       " add an indent level inside braces
set cindent                           " testing cindent...

" for autoindent, use same spaces/tabs mix as previous line, even if
" tabs/spaces are mixed. Helps for docblock, where the block comments have a
" space after the indent to align asterisks
set copyindent

" Try not to change the indent structure on "<<" and ">>" commands. I.e. keep
" block comments aligned with space if there is a space there.
set preserveindent

" ----------------------------------------------------------------------------
" Tabbing - overridden by editorconfig, IndentTab, after/ftplugin
" ----------------------------------------------------------------------------

set expandtab                         " default to spaces instead of tabs
set shiftwidth=2                      " softtabs are 2 spaces for expandtab

" Alignment tabs are two spaces, and never tabs. Negative means use same as
" shiftwidth (so the 2 actually doesn't matter).
set softtabstop=-2

" real tabs render 4 wide. Applicable to HTML, PHP, anything using real tabs.
" I.e., not applicable to JS.
set tabstop=4

" use multiple of shiftwidth when shifting indent levels.
" this is OFF so block comments don't get fudged when using ">>" and "<<"
set noshiftround

" When on, a <Tab> in front of a line inserts blanks according to
" 'shiftwidth'.  'tabstop' or 'softtabstop' is used in other places.  A
set smarttab

set backspace=indent,eol,start        " bs anything

" ----------------------------------------------------------------------------
" Trailing whitespace
" ----------------------------------------------------------------------------

set list
set listchars=""                      " reset
set listchars=tab:→\ 
set listchars+=trail:·
set listchars+=extends:»              " show cut off when nowrap
set listchars+=precedes:«

" ----------------------------------------------------------------------------
" Diffing
" ----------------------------------------------------------------------------

" Note this is += since fillchars was defined in splits
set fillchars+=diff:⣿
set diffopt=vertical                  " Use in vertical diff mode
set diffopt+=filler                   " blank lines to keep sides aligned
set diffopt+=iwhite                   " Ignore whitespace changes

" ----------------------------------------------------------------------------
" Spellcheck
" ----------------------------------------------------------------------------

" Add symlinked aspell from dotfiles as default spellfile
execute 'set spellfile=' . glob(expand(g:dko_vim_dir . '/en.utf-8.add'))

" ----------------------------------------------------------------------------
" Match and search
" ----------------------------------------------------------------------------

set showmatch                         " hl matching parens
set hlsearch
set incsearch
set wrapscan                          " Searches wrap around end of the file.
set ignorecase
set smartcase

" The Silver Searcher
if executable('ag') | set grepprg=ag\ --nogroup\ --nocolor | endif

" ----------------------------------------------------------------------------
" Wild and file globbing stuff
" ----------------------------------------------------------------------------

set browsedir=buffer                  " browse files in same dir as open file
set wildmenu                          " Enhanced command line completion.
set wildmode=list:longest             " Complete files like a shell.
set wildignorecase
" output, VCS
set wildignore+=.git,.hg,.svn
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*,*.gem
set wildignore+=*.aux,*.out,*.toc
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest,*.rbc,*.class
set wildignore+=*.ai,*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png,*.psd,*.webp
set wildignore+=*.avi,*.m4a,*.mp3,*.oga,*.ogg,*.wav,*.webm
set wildignore+=*.eot,*.otf,*.ttf,*.woff
set wildignore+=*.doc,*.pdf
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*.swp,.lock,.DS_Store,._*

" ----------------------------------------------------------------------------
" File saving
" ----------------------------------------------------------------------------

"set autoread                         " reload files if they were edited
                                      " elsewhere
set fileformats=unix,mac,dos
set fileformat=unix

" info file
if !has('nvim')
  execute 'set viminfo+=n' . expand(g:dko_vim_dir . '/.tmp/cache/.viminfo')
else
  execute 'set viminfo+=n' . expand(g:dko_nvim_dir . '/.tmp/cache/.nviminfo')
endif

" From https://github.com/swizzard/dotfiles/blob/master/.vimrc
" Don't keep .viminfo information for files in temporary directories or shared
" memory filesystems; this is because they're used as scratch spaces for tools
" like sudoedit(8) and pass(1) and hence could present a security problem
if has('viminfo') && has('autocmd')
  augroup viminfoskip
    autocmd!
    silent! autocmd BufNewFile,BufReadPre
        \ /tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*,*/shm/*
        \ setlocal viminfo=
  augroup END
endif

" swap - useless
set noswapfile

" backups
set backupskip=/tmp/*
" Make Vim able to edit crontab files again.
if has('autocmd')
  set backupskip+=,/private/tmp/*"
  if has('mac')
    autocmd vimrc BufEnter /private/tmp/crontab.* setlocal backupcopy=yes
  endif
endif
execute 'set backupdir=' . g:dko_vim_dir . '/.tmp/backup//'
set backup

" undo files
" double slash means create dir structure to mirror file's path
set undofile
set undolevels=500
set undoreload=500
execute 'set undodir=' . g:dko_vim_dir . '/.tmp/undo//'
execute 'set directory=' . g:dko_vim_dir . '/.tmp/swap//'

" ----------------------------------------------------------------------------
" Buffer reuse
" ----------------------------------------------------------------------------

set hidden                            " remember undo after quitting

" reveal already opened files from the quickfix window instead of opening new
" buffers
set switchbuf=useopen

" ----------------------------------------------------------------------------
" Clipboard -- use os clipboard
" ----------------------------------------------------------------------------

if (exists("$DISPLAY") || has('mac')) && has('clipboard')
  set clipboard=unnamed  " Share system clipboard.
  " Share X windows clipboard.
  if has('unnamedplus') | set clipboard+=unnamedplus | endif
endif

" ----------------------------------------------------------------------------
" Syntax
" ----------------------------------------------------------------------------

" Variable to highlight markdown fenced code properly -- uses tpope's
" vim-markdown plugin (which is bundled with vim7.4 now)
" There are more syntaxes, but checking for them makes editing md very slow
let g:markdown_fenced_languages = [
      \ 'html',
      \ 'javascript', 'js=javascript', 'json=javascript',
      \ 'sass',
      \ ]

" ----------------------------------------------------------------------------
" Autocommands
" ----------------------------------------------------------------------------

if has('autocmd')
  " Resize splits when the window is resized
  autocmd vimrc VimResized * :wincmd =

  " No EOL character on files -- specifically for WP VIP PHP
  autocmd vimrc BufRead,BufNewFile */wp-content/themes/vip/*
        \ setlocal noeol binary fileformat=dos

  " see after/ftplugin/*.vim for more filetype specific stuff
endif

" leave this down here since it trims local settings
set secure                            " no unsafe local vimrc commands

" ============================================================================
" Plugins
" ============================================================================

" Only load plugins on vim 7.3+ with autocmd
let g:dko_use_plugins = $DOTFILES_DISTRO != 'busybox' && has('autocmd')

" ============================================================================
" netrw
" ============================================================================
let g:loaded_netrwPlugin = !g:dko_use_plugins
" netrw in details format when no vimfiler
let g:netrw_liststyle = 3
let g:netrw_home = expand(g:dko_vim_dir . '/.tmp/cache')

" ============================================================================
" vim-plug
" ============================================================================

" Add plugin dirs to the runtimepath
if g:dko_use_plugins
  " Load vim-plug
  if empty(glob(expand(g:dko_vim_dir . '/autoload/plug.vim')))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd vimrc VimEnter * PlugInstall | source $MYVIMRC
  endif

  let g:dko_plugdir = '/plug/vim'
  if has('nvim') | let g:dko_plugdir = '/plug/nvim' | endif

  " ==========================================================================
  " What to load
  " ==========================================================================

  let g:dko_use_incsearch       = !has('nvim')
  let g:dko_use_deoplete        = has('nvim') && has('python3')
  let g:dko_use_neocomplete     = !has('nvim') && has('lua')

  " These get modified later
  let g:dko_use_airline         = 1
  let g:dko_use_gutentags       = 0
  let g:dko_use_indenttab       = 1
  let g:dko_use_tern_completion = 1 && (has('python') || has('python3'))
  let g:dko_has_completion      = 0

  call plug#begin(g:dko_vim_dir . g:dko_plugdir)

  " Notes on adding plugins:
  " - Absolutely do not use 'for' if the plugin provides an `ftdetect/`
  " - Use 'for' if the plugin has an `autoload/` dir, otherwise it provides
  "   no benefit (`ftplugin/`, `syntax/` and `indent/` are already only loaded
  "   based on the filetype matching the script name).

  " ========================================================================
  " Plug: Debugging
  " ========================================================================

  if $VIM_HILINKTRACE == '1'
    Plug 'gerw/vim-HiLinkTrace'
  endif

  " ========================================================================
  " Plug: File system
  " ========================================================================

  " creates dir if new file in new dir
  Plug 'dockyard/vim-easydir'

  if g:dko_use_gutentags | Plug 'ludovicchabant/vim-gutentags'
  endif

  " ========================================================================
  " Plug: Commands + Colorscheme
  " ========================================================================

  " Mostly for :Gblame
  Plug 'tpope/vim-fugitive'

  " Mostly for :Scriptnames and zS
  Plug 'tpope/vim-scriptease'

  " gK to lookup
  Plug 'keith/investigate.vim'

  " <F1> fuzzy find
  " <F2> recently used (neomru)
  " <F3> grep
  " <F8> command palette
  " <F9> file browser (vimfiler)
  " <F10> outline mode browser (unite-outline)
  " Most recently used files for unite.vim -- config is in unite.vim
  Plug 'Shougo/vimproc.vim', { 'do': 'make' }
        \| Plug 'Shougo/neomru.vim'
        \| Plug 'Shougo/unite.vim'
        \| Plug 'Shougo/unite-outline'
        \| Plug 'Shougo/vimfiler.vim'
        \| Plug 'ujihisa/unite-font'

  " <F5> toggle color
  if has('nvim') && g:dko_has_true_color
    Plug 'frankier/neovim-colors-solarized-truecolor-only'
  elseif has('gui_running')
    Plug 'altercation/vim-colors-solarized'
  endif

  " <F6>
  Plug 'nathanaelkane/vim-indent-guides'

  " <F7> - command mode with instant results when doing subst %s
  Plug 'osyo-manga/vim-over', { 'on': ['OverCommandLine'] }

  " Add file manip commands like Remove, Move, Rename, SudoWrite
  Plug 'tpope/vim-eunuch'

  " ========================================================================
  " Plug: Input, syntax, spacing
  " ========================================================================

  " @vimlint(EVL108, 1)
  if has('patch-7.4.785') && !has('fixedendofline')
    Plug 'vim-scripts/PreserveNoEOL'
  endif
  " Requires PreserveNoEOL or +fixedendofline
  Plug 'editorconfig/editorconfig-vim'

  " highlight matching html tag
  Plug 'gregsexton/MatchTag'

  " add gS to smart split lines like comma lists and html tags
  Plug 'AndrewRadev/splitjoin.vim'

  Plug 'scrooloose/syntastic'

  if g:dko_use_indenttab
    Plug 'vim-scripts/ingo-library'
          \| Plug 'vim-scripts/IndentTab'
  endif

  " ========================================================================
  " Plug: Completion
  " ========================================================================

  if      g:dko_use_neocomplete | Plug 'Shougo/neocomplete.vim'
  elseif  g:dko_use_deoplete    | Plug 'Shougo/deoplete.nvim'
  endif

  let g:dko_has_completion =
        \ exists("g:plugs['neocomplete.vim']")
        \ || exists("g:plugs['deoplete.nvim']")

  if g:dko_has_completion
    "Full syntax completion - super slow
    "Plug 'Shougo/neco-syntax', { 'for': ['scss'] }

    " Mixed-filetype completion for Shougo complete, e.g. highlight JS within
    " Markdown fenced code blocks.
    Plug 'Shougo/context_filetype.vim'

    Plug 'Shougo/neco-vim', { 'for': ['vim'] }

    Plug '1995eaton/vim-better-javascript-completion'

    if g:dko_use_tern_completion
      Plug 'marijnh/tern_for_vim', { 'do': 'npm install' }
    endif

    Plug 'Shougo/neosnippet'
          \| Plug 'honza/vim-snippets'
          \| Plug 'Shougo/neosnippet-snippets'
  endif

  " ========================================================================
  " Plug: Editing keys
  " ========================================================================

  Plug 'godlygeek/tabular', { 'on': ['Tabularize'] }

  " [x and ]x to jump to conflict markers
  Plug 'rhysd/conflict-marker.vim'

  " ;; or ,, to auto-insert comma or semicolon at end of current line as needed
  Plug 'lfilho/cosco.vim'

  " custom C-x C-a mappings
  Plug 'nishigori/increment-activator'

  Plug 'tomtom/tcomment_vim'

  " easyclip requires repeat
  Plug 'tpope/vim-repeat'
        \| Plug 'svermeulen/vim-easyclip'
        \| Plug 'davidosomething/EasyClipRing.vim'

  " fast increment datetimes
  Plug 'tpope/vim-speeddating'

  Plug 'tpope/vim-surround'

  " used for line bubbling commands on osx
  Plug 'tpope/vim-unimpaired'

  " provide ai and ii for indent blocks
  " provide al and il for current line
  " provide a_ and i_ for underscores
  " provide a- and i-
  " provide a= and i= for conflicts
  Plug 'kana/vim-textobj-user'
        \| Plug 'kana/vim-textobj-indent'
        \| Plug 'kana/vim-textobj-line'
        \| Plug 'mattn/vim-textobj-url'
        \| Plug 'rhysd/vim-textobj-conflict'

  " provide {, ", ', [, <, various other block objects
  Plug 'paradigm/TextObjectify'

  " ========================================================================
  " Plug: Language
  " ========================================================================

  " special end syntax for various langs
  Plug 'tpope/vim-endwise'

  " ========================================================================
  " Language: Git
  " ========================================================================

  " creates gitconfig, gitcommit, rebase
  " vim 7.4-77 ships with 2013 version, this is newer
  Plug 'tpope/vim-git'

  " show multipanes when editing a COMMIT_EDITMSG
  Plug 'rhysd/committia.vim'

  " ========================================================================
  " Language: HTML, XML, and generators: mustache, handlebars, jade
  " ========================================================================

  Plug 'othree/html5.vim'

  "Plug 'tpope/vim-haml'

  Plug 'othree/xml.vim'

  Plug 'digitaltoad/vim-jade'

  " Creates html.handlebars and other fts and sets syn
  Plug 'mustache/vim-mustache-handlebars'

  " ========================================================================
  " Language: JavaScript / CoffeeScript / JSON
  " ========================================================================

  Plug 'elzr/vim-json'

  " provides coffee ft
  Plug 'kchmck/vim-coffee-script'

  " TypeScript
  Plug 'leafgarland/typescript-vim'

  " react/JSX syn highlighting for .cjsx
  " If you're using coffee+react instead of es6+react, quit your job.
  "Plug 'mtscout6/vim-cjsx'

  " ----------------------------------------
  " Syntax
  " ----------------------------------------

  " Options
  " 'jelera/vim-javascript-syntax' " Jelera: No indent file
  " 'pangloss/vim-javascript'      " pangloss' is probably the oldest, lot of
                                   " contributors but not up-to-date
                                   " Includes indent settings
  " 'othree/yajs.vim'              " othree has the latest support
  "                                " no indent file, fork of jelera
  let g:dko_js_syntax = 'othree/yajs.vim'

  " The "for" is required so the syntax registers on filetype, otherwise
  " yajs has trouble overriding the default js syntax due to runtime order
  if exists('g:dko_js_syntax')
    Plug g:dko_js_syntax, { 'for': 'javascript' }
  endif

  " ----------------------------------------
  " Syntax Addons
  " ----------------------------------------

  " Options
  "'gavocanov/vim-js-indent'                " Indent from pangloss
  "'jiangmiao/simple-javascript-indenter'   " Alternative js indent
  "'jason0x43/vim-js-indent'                " Use HTML's indenter with
                                            " TypeScript support
  let g:dko_js_indent = 'gavocanov/vim-js-indent'
  "let g:dko_js_indent = 'jiangmiao/simple-javascript-indenter'
  "let g:dko_js_indent = 'jason0x43/vim-js-indent'
  if exists('g:dko_js_indent') && exists("g:plugs['yajs.vim']")
    Plug g:dko_js_indent, { 'for': 'javascript' }
  endif

  " es.next support
  "Plug 'othree/es.next.syntax.vim'

  " extends syntax for with jQuery,backbone,etc.
  Plug 'othree/javascript-libraries-syntax.vim'

  " After syntax, ftplugin, indent for JSX
  Plug 'mxw/vim-jsx'

  " ----------------------------------------
  " Features
  " ----------------------------------------

  " Parameter completion
  Plug 'othree/jspc.vim'

  " <leader>pd on function to insert jsdoc above
  "Plug 'heavenshell/vim-jsdoc'
  Plug 'davidosomething/vim-jsdoc'

  " gf for going to node_modules files
  Plug 'moll/vim-node'


  " ========================================================================
  " Language: Markdown
  " ========================================================================

  " Override vim included markdown ft* and syntax
  " The git repo has a newer syntax file than the one that ships with vim
  "Plug 'tpope/vim-markdown'
  Plug 'vim-pandoc/vim-pandoc-syntax'

  Plug 'suan/vim-instant-markdown', {
        \   'do': 'npm install -g instant-markdown-d'
        \ }

  " ========================================================================
  " Language: Nginx
  " ========================================================================

  Plug 'moskytw/nginx-contrib-vim'

  " ========================================================================
  " Language: PHP, twig
  " ========================================================================

  " ----------------------------------------
  " Syntax
  " ----------------------------------------

  " creates twig ft
  Plug 'evidens/vim-twig'

  Plug 'StanAngeloff/php.vim', { 'for': 'php' }

  " Official indent plugin for vim, later version than what it comes with
  Plug '2072/PHP-Indenting-for-VIm', { 'for': 'php' }

  " ----------------------------------------
  " Features
  " ----------------------------------------

  " Completion
  Plug 'shawncplus/phpcomplete.vim', { 'for': 'php' }
        "\| Plug 'dsawardekar/wordpress.vim', { 'for': ['php'] }

  " Snippet
  Plug 'tobyS/vmustache', { 'for': ['php', 'blade'] }
        \| Plug 'tobyS/pdv', { 'for': ['php', 'blade'] }

  " ========================================================================
  " Language: Ruby, rails, puppet
  " ========================================================================

  " creates pp filetype
  Plug 'rodjek/vim-puppet'

  " highlighting for Gemfile
  Plug 'tpope/vim-bundler'

  " creates ruby filetype
  Plug 'vim-ruby/vim-ruby'

  " ========================================================================
  " Language: Stylesheets
  " ========================================================================

  " ----------------------------------------
  " Syntax
  " ----------------------------------------

  " creates less filetype
  Plug 'groenewege/vim-less'

  " css.vim provides @media syntax highlighting where hail2u doesn't
  " JulesWang/css.vim is the active repo for the css.vim bundled with vim
  " hail2u extends vim's css highlighting
  Plug 'JulesWang/css.vim'
        \| Plug 'hail2u/vim-css3-syntax'
        \| Plug 'cakebaker/scss-syntax.vim'

  " ----------------------------------------
  " Features
  " ----------------------------------------

  Plug 'ap/vim-css-color'

  " Omnicompletion
  Plug 'othree/csscomplete.vim'

  " ========================================================================
  " Language: VimL
  " ========================================================================

  Plug 'ynkdir/vim-vimlparser'
        \| Plug 'syngan/vim-vimlint'

  if executable('vint')
    Plug 'Kuniwak/vint'
          \| Plug 'todesking/vint-syntastic'
  endif

  " ========================================================================
  " Language: YAML
  " ========================================================================

  Plug 'ingydotnet/yaml-vim'

  " ========================================================================
  " Plug: UI -- load last!
  " ========================================================================

  " <Plug> to not move on * search function
  Plug 'haya14busa/vim-asterisk'

  " highlight partial matches as you type in search mode
  if g:dko_use_incsearch | Plug 'haya14busa/incsearch.vim'
  endif

  " show registers in split if use \" or <C-R>
  Plug 'junegunn/vim-peekaboo'

  " Show (#/total results) when searching for a term
  Plug 'osyo-manga/vim-anzu'

  if g:dko_use_airline | Plug 'vim-airline/vim-airline'
  else | Plug 'ap/vim-buftabline'
  endif

  Plug 'now/vim-quit-if-only-quickfix-buffer-left'

  call plug#end()

  " ========================================================================
  " Configs
  " ========================================================================

  " Some configs need to be set before plugins are loaded, see before/plugin/*
  " Rest are split into ftplugin/*.vim and plugin/plug-*.vim as needed

endif

" ============================================================================
" Fix runtimepath
" ============================================================================

" VIM is very unusual that it loads system preferences AFTER user preferences
" so users have a very hard time overriding system prefs (unless they use
" after/ exclusively and the system after/ is empty).
"
" E.g. the archlinux distribution includes the line `set history=50` in
" /usr/share/vim/vimfiles/archlinux.vim which loaded by /etc/vimrc. That file
" is always loaded after the user vimrc which makes it annoying to override.
" COMMENT IT OUT from /etc/vimrc despite it saying not to!

" Remove system runtimepaths
execute "set runtimepath-=$VIM/vimfiles"
execute "set runtimepath-=$VIMRUNTIME"
execute "set runtimepath-=$VIM/vimfiles/after"
execute "set runtimepath-=$VIMRUNTIME/after"

" Remove default user runtimepaths
execute "set runtimepath-=$HOME/.vim"
execute "set runtimepath-=$HOME/.vim/after"
execute "set runtimepath-=$XDG_CONFIG_HOME/nvim"
execute "set runtimepath-=$XDG_CONFIG_HOME/nvim/after"

" Save the remaining runtimepaths, which are only vim-plug ones
let g:dko_plugins_rtp=&runtimepath

" Start runtimepath with system runtimepath
execute "set runtimepath=$VIM/vimfiles"
execute "set runtimepath+=$VIMRUNTIME"
" Note after is here -- vim-plug after and my after will override it
execute "set runtimepath+=$VIM/vimfiles/after"

" Append my runtimepaths to override system (not the same as default user,
" these use specific dko_vim_dir path)
" see `plugin/mine.vim` for my vim settings
execute "set runtimepath+=" . g:dko_vim_dir

" Append vim-plug runtimepaths
execute "set runtimepath+=" . g:dko_plugins_rtp

" Append after: system, then mine, so mine is the last
execute "set runtimepath+=" . g:dko_vim_dir . "/after"

" Local overrides last
execute "set runtimepath+=$HOME/.secret/vim"

" Loads vimrc.vim from the .secret/vim runtimepath (and wherever else)
runtime! vimrc.vim

