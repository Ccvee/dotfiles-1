#!/usr/bin/env bash
#
# Cleanup home for XDG compliance
#

set -e

# ============================================================================
# initialize script and dependencies
# ============================================================================

cd "$(dirname "$0")/.." || exit 1
readonly dotfiles_path="$(pwd)"
. "${dotfiles_path}/shell/helpers.bash"

# ============================================================================
# ENV validation
# ============================================================================

if [ -z "$BDOTDIR" ] \
  || [ -z "$XDG_CONFIG_HOME" ] \
  || [ -z "$XDG_DATA_HOME" ]
then
  dko::err  "DOTFILES are not set up, run this after symlinking and restarting"
  dko::err_ "shell"
  exit 1
fi

# ============================================================================
# Cleanup functions
# ============================================================================

# Move entire dir or file somewhere else (create dir if needed)
# $1 full path to move (can be file or dir)
# $2 full destination path
__move() {
  dko::status "Move ${1} to ${2}"

  if [ ! -d "$1" ] && [ ! -f "$1" ] && [ ! -h "$1" ]; then
    dko::ok "Didn't find ${1}"
    return 0
  fi

  if [ -d "$2" ] || [ -f "$2" ] || [ -h "$2" ]; then
    dko::err  "Not moving ${1} to ${2}, destination already exists."
    dko::err_ "Please resolve conflict manually."
    return 1
  fi

  local dest_parent
  dest_parent="$(dirname "${2}")"
  if [ ! -d "$dest_parent" ]; then
    mkdir -p "$dest_parent" && dko::ok "Created parent directory ${dest_parent}"
  fi

  mv "$1" "$2" && dko::ok "Moved ${1} to ${2}"
}

# Move contents of one dir into another
# $1 source directory, removed on completion
# $2 destination directory, created if needed
__merge_dir() {
  dko::status "Merge ${1} into ${2}"

  if [ ! -d "$1" ]; then
    dko::ok "Didn't find ${1}"
    return 0
  fi

  if [ ! -d "$2" ]; then
    mkdir -p "$2" && dko::ok "Created dest directory ${2}"
  fi

  mv "${1}/*"   "$2" && dko::ok "Moved contents of ${1} into ${2}"
  mv "${1}/.*"  "$2" && dko::ok "Moved .contents in ${1} into ${2}"
  rmdir "$1" && dko::ok "Removed ${1}"
}

# Remove file or dir completely with confirmation
# $1 path to completely remove
__remove() {
  dko::status "Remove ${1}"

  if [ -f "$1" ] || [ -h "$1" ]; then
    rm -i   "$1" && dko::ok "Removed file ${1}"
  elif [ -d "$1" ]; then
    rm -ir  "$1" && dko::ok "Removed directory ${1}"
  else
    dko::ok "Didn't find ${1}"
  fi
}

# Logic for NVM
__clean_nvm() {
  dko::status "Move invalid NVM paths"

  if [[ "${NVM_DIR}" != "${XDG_CONFIG_HOME}/nvm" ]]; then
    dko::err "NVM_DIR not set properly. Should be ${XDG_CONFIG_HOME}/nvm"
    return 1
  fi

  mkdir -p "${NVM_DIR}"

  [[ -n "$NVM_DIR" ]] && __move "${XDG_CONFIG_HOME}/.nvm" "$NVM_DIR"
  [[ -n "$NVM_DIR" ]] && __move "${HOME}/.nvm" "$NVM_DIR"
}

# ============================================================================
# main
# ============================================================================

__move      "${HOME}/.bash_history"   "${LDOTDIR}/bash_history"
__move      "${HOME}/.zhistory"       "${LDOTDIR}/zsh_history"
__move      "${HOME}/.gimp-2.8"       "${XDG_CONFIG_HOME}/GIMP/2.8"
__move      "${HOME}/.inputrc"        "${XDG_CONFIG_HOME}/readline/inputrc"
__merge_dir "${HOME}/.fonts"          "${XDG_DATA_HOME}/fonts"

[[ -n "$COMPOSER_HOME" ]] && __move "${HOME}/.composer" "$COMPOSER_HOME"
[[ -n "$GNUPGHOME" ]] && __move "${HOME}/.gnupg" "$GNUPGHOME"
[[ -n "$PYLINTHOME" ]] && __move "${HOME}/.pylint.d" "$PYLINTHOME"
[[ -n "$YARN_CACHE_FOLDER" ]] && __move "${HOME}/.yarn-cache" "$YARN_CACHE_FOLDER"

# Removes
! dko::same "${HOME}/.dotfiles/bash/dot.bash_profile" "${HOME}/.bash_profile" \
  && __remove "${HOME}/.bash_profile"
! dko::same "${HOME}/.dotfiles/bash/dot.bashrc" "${HOME}/.bashrc" \
__remove "${HOME}/.bashrc"
! dko::same "${HOME}/.dotfiles/zsh/dot.zshenv" "${HOME}/.zshenv" \
__remove "${HOME}/.zshenv"
# alias points to dotfile
__remove "${HOME}/.mdlrc"
# should be in XDG
__remove "${HOME}/.pulse-cookie"
# should be symlinked in XDG
__remove "${HOME}/.gitconfig"
# should be symlinked in XDG
__remove "${HOME}/.gitignore"
# should be in .local; probably created on ZSH startup
__remove "${HOME}/.wget-hsts"
# should be .tern-config
__remove "${HOME}/.tern-project"

# NVM
__clean_nvm

