# vim:syntax=sh

brc() {
  brew cask $@
}

########################################
# OSX filesystem
##
# http://www.commandlinefu.com/commands/view/10771/osx-function-to-list-all-members-for-a-given-group
members() {
  dscl . -list /Users | while read user; do printf "$user "; dsmemberutil checkmembership -U "$user" -G "$*"; done | grep "is a member" | cut -d " " -f 1;
}

########################################
# Scripting

##
# source a file if it exists
source_if_exists() {
  [ -f $1 ] && source $1 # && echo "Sourced $1"
}

##
# silently determine existence of executable
has_program() {
  command -v $1 >/dev/null 2>&1
}

########################################
# Directory cleanup

##
# flatten a dir
flatten() {
  if [ -n $1 ]; then
    read "reply?Flatten folder: are you sure? [Yy] "
  else
    reply=Y
  fi

  if [[ $reply =~ ^[Yy]$ ]]; then
    mv ./*/* .
  fi
}

##
# delete empty subdirs
prune() {
  if [ -n $1 ]; then
    read "reply?Prune empty directories: are you sure? [Yy] "
  else
    reply=Y
  fi

  if [[ $reply =~ ^[Yy]$ ]]; then
    find . -type d -empty -delete
  fi
}

########################################
# dev
a2() {
  apachectl $@
}

a2r() {
  apachectl -t && sudo apachectl -e info -k restart
}

art() {
  php artisan $@
}

cunt() {
  COMPOSER_CACHE_DIR=/dev/null composer update
}

##
# PHP version numbers
# @TODO use cut instead of splitting awk?
phpver() {
  php -r 'echo phpversion();'
}

phpminorver() {
  php -r "echo PHP_MAJOR_VERSION . '.' . PHP_MINOR_VERSION;"
}

##
# editing
e() {
  if [[ $DOTFILES_OS = "Darwin" ]] && $HAS_BREW; then
    if [ -z $1 ]; then
      open -a MacVim.app
    else
      $BREW_PREFIX/bin/mvim --servername VIM --remote-tab-silent $@
    fi
  else
    if [ -n "$SSH_CONNECTION" ] || [ -z "$DISPLAY" ]; then
      vim $@
    else
      if [ -z $1 ]; then
        if [ -n "$(gvim --serverlist)" ]; then
          gvim --servername GVIM --remote-expr "foreground()"
          gvim --servername GVIM --remote-send "<Esc>:tabnew<CR>"
        else
          gvim
        fi
      else
        gvim --servername GVIM --remote-tab-silent $@
      fi
    fi
  fi
}
eapache() {
  e $APACHE_HTTPD_CONF $@
}
ephpini() {
  e $PHP_INI $@
}
evhosts() {
  e $APACHE_HTTPD_VHOSTS $@
}

########################################
# traversal
##
# Change directory to the nearest repo root
cdr() {
  local dir=${1:-$PWD}
  if [[ -d $dir/.svn ]]; then
    while [[ -d $dir/.. && -d $dir/../.svn ]]; do
      dir+=/..
    done
  else
    while [[ -d $dir && ! ( -d $dir/.git || -d $dir/.hg || -d $dir/.bzr ) ]]; do
      dir+=/..
    done
  fi
  [[ -d $dir ]] && cd "$dir"
}

##
# up 2 to cd ../..
up() {
  local x='';for i in $(seq ${1:-1});do x="$x../"; done;cd $x;
}

########################################
# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* *
  fi
}

########################################
# Archiving
##
# Export repo files to specified dir
gitexport() {
  local to_dir = "${2:-./gitexport}"
  rsync -a ${1:-./} $to_dir --exclude $to_dir --exclude .git
}

##
# extract most known archive types
# http://alias.sh/extract-most-know-archives-one-command
extract() {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1     ;;
      *.tar.gz)    tar xzf $1     ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       unrar e $1     ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xf $1      ;;
      *.tbz2)      tar xjf $1     ;;
      *.tgz)       tar xzf $1     ;;
      *.zip)       unzip $1       ;;
      *.7z)        7z x $1        ;;
      *.Z)         uncompress $1  ;;
      *)     echo "'$1' cannot be extracted via extract()" ;;
  esac
else
  echo "'$1' is not a valid file"
fi
}

########################################
# Network tools
flushdns() {
  dscacheutil -flushcache
  sudo killall -HUP mDNSResponder
}

##
# type localip to get ethernet or wireless ip
localip() {
  local localip=$(ipconfig getifaddr en0)
  if [ -z "$localip" ]; then
    localip=$(ipconfig getifaddr en1)
  fi
  echo $localip
}
