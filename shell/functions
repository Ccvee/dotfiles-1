# Scripting --------------------------------------------------------------------

# source a file if it exists
source_if_exists() {
  [ -f "$1" ] && source "$1" # && echo "Sourced $1"
}

# silently determine existence of executable
has_program() {
  command -v "$1" >/dev/null 2>&1
}

# OSX --------------------------------------------------------------------------

brc() {
  brew cask "${@}"
}

# list members for a group
# http://www.commandlinefu.com/commands/view/10771/osx-function-to-list-all-members-for-a-given-group
members() {
  dscl . -list /Users | while read user; do
    printf "%s " "$user"
    dsmemberutil checkmembership -U "$user" -G "$*"
  done | grep "is a member" | cut -d " " -f 1;
}

# linux ------------------------------------------------------------------------

# flush linux font cache
flushfonts() {
  fc-cache -f -v
}

# Directory --------------------------------------------------------------------

# flatten a dir
flatten() {
  if [[ -n $1 ]]; then
    read "reply?Flatten folder: are you sure? [Yy] "
  else
    reply=Y
  fi

  if [[ $reply =~ ^[Yy]$ ]]; then
    mv ./*/* .
  fi
}

# delete empty subdirs
prune() {
  if [[ -n $1 ]]; then
    read "reply?Prune empty directories: are you sure? [Yy] "
  else
    reply=Y
  fi

  if [[ $reply =~ ^[Yy]$ ]]; then
    find . -type d -empty -delete
  fi
}

# dev
a2() {
  apachectl "$@"
}

a2r() {
  [[ $DOTFILES_OS = "Darwin" ]] && sudo apachectl -e info -k restart
  [[ $DOTFILES_DISTRO = "debian" ]]  && sudo service apache2 reload
}

art() {
  php artisan "$@"
}

cunt() {
  COMPOSER_CACHE_DIR=/dev/null composer update
}

# PHP version numbers
# @TODO use cut instead of splitting awk?
phpver() {
  php -r 'echo phpversion();'
}

phpminorver() {
  php -r "echo PHP_MAJOR_VERSION . '.' . PHP_MINOR_VERSION;"
}

eapache() {
  e "${APACHE_HTTPD_ROOT}/${APACHE_HTTPD_CONF}"
}
ephpini() {
  e "$(php -r "echo php_ini_loaded_file();")"
}

########################################
# traversal

# display paths, one on each line
paths() {
  echo "$PATH" | tr ':' '\n'
}

# Go to git root
gr() {
  git rev-parse && cd "$(git rev-parse --show-cdup)"
}

# up 2 to cd ../..
up() {
  local x=''
  for i in $(seq "${1:-1}"); do
    x="$x../"
  done
  cd "$x"
}

########################################
# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du "$arg" -- "$@"
  else
    du "$arg" .[^.]* ./*
  fi
}

########################################
# Archiving

# Export repo files to specified dir
gitexport() {
  local to_dir="${2:-./gitexport}"
  rsync -a "${1:-./}" "$to_dir" --exclude "$to_dir" --exclude .git
}

########################################
# Network tools
flushdns() {
  dscacheutil -flushcache
  sudo killall -HUP mDNSResponder
}

# type localip to get ethernet or wireless ip
localip() {
  local localip=$(ipconfig getifaddr en0)
  if [ -z "$localip" ]; then
    localip=$(ipconfig getifaddr en1)
  fi
  echo "$localip"
}

mykey() {
  cat "$HOME/.ssh/id_rsa.pub"
  if has_program pbcopy; then
    pbcopy < "$HOME/.ssh/id_rsa.pub"
  elif has_program xclip; then
    xclip -sel clip < "$HOME/.ssh/id_rsa.pub"
  fi
}

########################################
# Linux
# Cleanup Open With Applications
cleanopenwith() {
  # remove wine apps
  rm -r "$HOME/.local/share/applications/wine*"
  sed -i '/wine/d' "$HOME/.local/share/applications/mimeinfo.cache"
}

o() {
  if [ "$DOTFILES_OS" = "Darwin" ]; then
    open "$@"
  else
    xdg-open "$@" >/dev/null 2>&1 &
  fi
}

# vim: set ft=sh :
