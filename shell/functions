brc() {
  brew cask "${@}"
}

########################################
# Linux
flushfonts() {
  fc-cache -f -v
}

########################################
# OSX filesystem
##
# http://www.commandlinefu.com/commands/view/10771/osx-function-to-list-all-members-for-a-given-group
members() {
  dscl . -list /Users | while read user; do
    printf "%s " "$user"
    dsmemberutil checkmembership -U "$user" -G "$*"
  done | grep "is a member" | cut -d " " -f 1;
}

########################################
# Scripting
##
# source a file if it exists
source_if_exists() {
  [ -f "$1" ] && source "$1" # && echo "Sourced $1"
}

##
# silently determine existence of executable
has_program() {
  command -v "$1" >/dev/null 2>&1
}

########################################
# Directory cleanup

##
# flatten a dir
flatten() {
  if [[ -n $1 ]]; then
    read "reply?Flatten folder: are you sure? [Yy] "
  else
    reply=Y
  fi

  if [[ $reply =~ ^[Yy]$ ]]; then
    mv ./*/* .
  fi
}

##
# delete empty subdirs
prune() {
  if [[ -n $1 ]]; then
    read "reply?Prune empty directories: are you sure? [Yy] "
  else
    reply=Y
  fi

  if [[ $reply =~ ^[Yy]$ ]]; then
    find . -type d -empty -delete
  fi
}

########################################
# dev
a2() {
  apachectl "$@"
}

a2r() {
  [[ $DOTFILES_OS = "Darwin" ]] && sudo apachectl -e info -k restart
  [[ $DOTFILES_OS = "Linux" ]]  && sudo service apache2 reload
}

art() {
  php artisan "$@"
}

cunt() {
  COMPOSER_CACHE_DIR=/dev/null composer update
}

##
# PHP version numbers
# @TODO use cut instead of splitting awk?
phpver() {
  php -r 'echo phpversion();'
}

phpminorver() {
  php -r "echo PHP_MAJOR_VERSION . '.' . PHP_MINOR_VERSION;"
}

##
# editing
e() {
  if [[ $DOTFILES_OS = "Darwin" ]] && [[ -n $HAS_BREW ]]; then
    if [ -z "$1" ]; then
      open -a MacVim.app
    else
      "$BREW_PREFIX"/bin/mvim --servername VIM --remote-tab-silent "$@"
    fi
  else
    if [ -n "$SSH_CONNECTION" ] || [ -z "$DISPLAY" ]; then
      vim "$@"
    else
      if [ -z "$1" ]; then
        if [ -n "$(gvim --serverlist)" ]; then
          gvim --servername GVIM --remote-expr "foreground()"
          gvim --servername GVIM --remote-send "<Esc>:tabnew<CR>"
        else
          gvim
        fi
      else
        gvim --servername GVIM --remote-tab-silent "$@"
      fi
    fi
  fi
}
eapache() {
  e "${APACHE_HTTPD_ROOT}/${APACHE_HTTPD_CONF}"
}
ephpini() {
  e "$(php -r "echo php_ini_loaded_file();")"
}

########################################
# traversal
##

##
# up 2 to cd ../..
up() {
  local x=''
  for i in $(seq "${1:-1}"); do
    x="$x../"
  done
  cd "$x"
}

########################################
# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du "$arg" -- "$@"
  else
    du "$arg" .[^.]* ./*
  fi
}

########################################
# Archiving
##
# Export repo files to specified dir
gitexport() {
  local to_dir="${2:-./gitexport}"
  rsync -a "${1:-./}" "$to_dir" --exclude "$to_dir" --exclude .git
}

##
# extract most known archive types
# http://alias.sh/extract-most-know-archives-one-command
extract() {
  if [ -f "$1" ] ; then
    case $1 in
      *.tar.bz2)   tar xjf "$1"     ;;
      *.tar.gz)    tar xzf "$1"     ;;
      *.bz2)       bunzip2 "$1"     ;;
      *.rar)       unrar e "$1"     ;;
      *.gz)        gunzip "$1"      ;;
      *.tar)       tar xf "$1"      ;;
      *.tbz2)      tar xjf "$1"     ;;
      *.tgz)       tar xzf "$1"     ;;
      *.zip)       unzip "$1"       ;;
      *.7z)        7z x "$1"        ;;
      *.Z)         uncompress "$1"  ;;
      *)     echo "'$1' cannot be extracted via extract()" ;;
  esac
else
  echo "'$1' is not a valid file"
fi
}

########################################
# Network tools
flushdns() {
  dscacheutil -flushcache
  sudo killall -HUP mDNSResponder
}

##
# type localip to get ethernet or wireless ip
localip() {
  local localip=$(ipconfig getifaddr en0)
  if [ -z "$localip" ]; then
    localip=$(ipconfig getifaddr en1)
  fi
  echo "$localip"
}

mykey() {
  cat ~/.ssh/id_rsa.pub
  if has_program pbcopy; then
    pbcopy < ~/.ssh/id_rsa.pub
  elif has_program xclip; then
    xclip -sel clip < ~/.ssh/id_rsa.pub
  fi
}

########################################
# Linux
# Cleanup Open With Applications
cleanopenwith() {
  # remove wine apps
  rm -r ~/.local/share/applications/wine*
  sed -i '/wine/d' ~/.local/share/applications/mimeinfo.cache
}

o() {
  if [[ $DOTFILES_OS = "Darwin" ]]; then
    open "$@"
  else
    xdg-open "$@" >/dev/null 2>&1 &
  fi
}

# vim:syn=sh
